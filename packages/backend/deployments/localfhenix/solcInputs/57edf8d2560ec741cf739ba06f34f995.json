{
  "language": "Solidity",
  "sources": {
    "@fhenixprotocol/contracts/access/Permissioned.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause-Clear\npragma solidity >=0.8.19 <0.9.0;\n\nimport { ECDSA } from \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport { EIP712 } from \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\";\n\n/// @title Permissioned Access Control Contract\n/// @notice Abstract contract that provides EIP-712 based signature verification for access control\n/// @dev This contract should be inherited by other contracts to provide EIP-712 signature validated access control\nabstract contract Permissioned is EIP712 {\n    /// @notice Emitted when the signer is not the message sender\n    error SignerNotMessageSender();\n\n    /// @notice Emitted when the signer is not the specified owner\n    error SignerNotOwner();\n\n    /// @dev Constructor that initializes EIP712 domain separator with a name and version\n    /// solhint-disable-next-line func-visibility, no-empty-blocks\n    constructor() EIP712(\"Fhenix Permission\", \"1.0\") {} \n\n    /// @notice Modifier that requires the provided signature to be signed by the message sender\n    /// @param permission Data structure containing the public key and the signature to be verified\n    modifier onlySender(Permission memory permission) {\n        bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n            keccak256(\"Permissioned(bytes32 publicKey)\"),\n            permission.publicKey\n        )));\n        address signer = ECDSA.recover(digest, permission.signature);\n        if (signer != msg.sender)\n            revert SignerNotMessageSender();\n        _;\n    }\n\n    /// @notice Modifier that requires the provided signature to be signed by a specific owner address\n    /// @param permission Data structure containing the public key and the signature to be verified\n    /// @param owner The expected owner of the public key to match against the recovered signer\n    modifier onlyPermitted(Permission memory permission, address owner) {\n        bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n            keccak256(\"Permissioned(bytes32 publicKey)\"),\n            permission.publicKey\n        )));\n        address signer = ECDSA.recover(digest, permission.signature);\n        if (signer != owner)\n            revert SignerNotOwner();\n        _;\n    }\n}\n\n/// @title Struct for holding signature information\n/// @notice Used to pass both the public key and signature data within transactions\n/// @dev Should be used with Signature-based modifiers for access control\nstruct Permission {\n    bytes32 publicKey;\n    bytes signature;\n}\n"
    },
    "@fhenixprotocol/contracts/FHE.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause-Clear\n// solhint-disable one-contract-per-file\n\npragma solidity >=0.8.19 <=0.8.25;\n\nimport {Precompiles, FheOps} from \"./FheOS.sol\";\n\ntype ebool is uint256;\ntype euint8 is uint256;\ntype euint16 is uint256;\ntype euint32 is uint256;\ntype euint64 is uint256;\ntype euint128 is uint256;\ntype euint256 is uint256;\ntype eaddress is uint256;\n\nstruct inEbool {\n    bytes data;\n}\nstruct inEuint8 {\n    bytes data;\n}\nstruct inEuint16 {\n    bytes data;\n}\nstruct inEuint32 {\n    bytes data;\n}\nstruct inEuint64 {\n    bytes data;\n}\nstruct inEuint128 {\n    bytes data;\n}\nstruct inEuint256 {\n    bytes data;\n}\nstruct inEaddress {\n    bytes data;\n}\n\nstruct SealedArray {\n  bytes[] data;\n}\n\nlibrary Common {\n    // Values used to communicate types to the runtime.\n    // Must match values defined in warp-drive protobufs for everything to \n    // make sense\n    uint8 internal constant EUINT8_TFHE = 0;\n    uint8 internal constant EUINT16_TFHE = 1;\n    uint8 internal constant EUINT32_TFHE = 2;\n    uint8 internal constant EUINT64_TFHE = 3;\n    uint8 internal constant EUINT128_TFHE = 4;\n    uint8 internal constant EUINT256_TFHE = 5;\n    uint8 internal constant EADDRESS_TFHE = 12;\n    // uint8 internal constant INT_BGV = 12;\n    uint8 internal constant EBOOL_TFHE = 13;\n    \n    function bigIntToBool(uint256 i) internal pure returns (bool) {\n        return (i > 0);\n    }\n\n    function bigIntToUint8(uint256 i) internal pure returns (uint8) {\n        return uint8(i);\n    }\n\n    function bigIntToUint16(uint256 i) internal pure returns (uint16) {\n        return uint16(i);\n    }\n\n    function bigIntToUint32(uint256 i) internal pure returns (uint32) {\n        return uint32(i);\n    }\n\n    function bigIntToUint64(uint256 i) internal pure returns (uint64) {\n        return uint64(i);\n    }\n\n    function bigIntToUint128(uint256 i) internal pure returns (uint128) {\n        return uint128(i);\n    }\n\n    function bigIntToUint256(uint256 i) internal pure returns (uint256) {\n        return i;\n    }\n\n    function bigIntToAddress(uint256 i) internal pure returns (address) {\n      return address(uint160(i));\n    }\n    \n    function toBytes(uint256 x) internal pure returns (bytes memory b) {\n        b = new bytes(32);\n        assembly { mstore(add(b, 32), x) }\n    }\n}\n\nlibrary Impl {\n    function sealoutput(uint8 utype, uint256 ciphertext, bytes32 publicKey) internal pure returns (string memory reencrypted) {\n        // Call the sealoutput precompile.\n        reencrypted = FheOps(Precompiles.Fheos).sealOutput(utype, Common.toBytes(ciphertext), bytes.concat(publicKey));\n\n        return reencrypted;\n    }\n\n    function verify(bytes memory _ciphertextBytes, uint8 _toType) internal pure returns (uint256 result) {\n        bytes memory output;\n\n        // Call the verify precompile.\n        output = FheOps(Precompiles.Fheos).verify(_toType, _ciphertextBytes);\n        result = getValue(output);\n    }\n\n    function cast(uint8 utype, uint256 ciphertext, uint8 toType) internal pure returns (uint256 result) {\n        bytes memory output;\n\n        // Call the cast precompile.\n        output = FheOps(Precompiles.Fheos).cast(utype, Common.toBytes(ciphertext), toType);\n        result = getValue(output);\n    }\n\n    function getValue(bytes memory a) internal pure returns (uint256 value) {\n        assembly {\n            value := mload(add(a, 0x20))\n        }\n    }\n\n    function trivialEncrypt(uint256 value, uint8 toType) internal pure returns (uint256 result) {\n        bytes memory output;\n\n        // Call the trivialEncrypt precompile.\n        output = FheOps(Precompiles.Fheos).trivialEncrypt(Common.toBytes(value), toType);\n\n        result = getValue(output);\n    }\n\n    function select(uint8 utype, uint256 control, uint256 ifTrue, uint256 ifFalse) internal pure returns (uint256 result) {\n        bytes memory output;\n\n        // Call the trivialEncrypt precompile.\n        output = FheOps(Precompiles.Fheos).select(utype, Common.toBytes(control), Common.toBytes(ifTrue), Common.toBytes(ifFalse));\n\n        result = getValue(output);\n    }\n}\n\nlibrary FHE {\n    euint8 public constant NIL8 = euint8.wrap(0);\n    euint16 public constant NIL16 = euint16.wrap(0);\n    euint32 public constant NIL32 = euint32.wrap(0);\n\n    // Return true if the encrypted integer is initialized and false otherwise.\n    function isInitialized(ebool v) internal pure returns (bool) {\n        return ebool.unwrap(v) != 0;\n    }\n\n    // Return true if the encrypted integer is initialized and false otherwise.\n    function isInitialized(euint8 v) internal pure returns (bool) {\n        return euint8.unwrap(v) != 0;\n    }\n\n    // Return true if the encrypted integer is initialized and false otherwise.\n    function isInitialized(euint16 v) internal pure returns (bool) {\n        return euint16.unwrap(v) != 0;\n    }\n\n    // Return true if the encrypted integer is initialized and false otherwise.\n    function isInitialized(euint32 v) internal pure returns (bool) {\n        return euint32.unwrap(v) != 0;\n    }\n    \n    // Return true if the encrypted integer is initialized and false otherwise.\n    function isInitialized(euint64 v) internal pure returns (bool) {\n        return euint64.unwrap(v) != 0;\n    }\n    \n        // Return true if the encrypted integer is initialized and false otherwise.\n    function isInitialized(euint128 v) internal pure returns (bool) {\n        return euint128.unwrap(v) != 0;\n    }\n    \n        // Return true if the encrypted integer is initialized and false otherwise.\n    function isInitialized(euint256 v) internal pure returns (bool) {\n        return euint256.unwrap(v) != 0;\n    }\n\n    function isInitialized(eaddress v) internal pure returns (bool) {\n        return eaddress.unwrap(v) != 0;\n    }\n\n    function getValue(bytes memory a) private pure returns (uint256 value) {\n        assembly {\n            value := mload(add(a, 0x20))\n        }\n    }\n    \n    function mathHelper(\n        uint8 utype,\n        uint256 lhs,\n        uint256 rhs,\n        function(uint8, bytes memory, bytes memory) external pure returns (bytes memory) impl\n    ) internal pure returns (uint256 result) {\n        bytes memory output;\n        output = impl(utype, Common.toBytes(lhs), Common.toBytes(rhs));\n        result = getValue(output);\n    }\n    \n    /// @notice This functions performs the add operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function add(euint8 lhs, euint8 rhs) internal pure returns (euint8) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint8(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint8(0);\n        }\n        uint256 unwrappedInput1 = euint8.unwrap(lhs);\n        uint256 unwrappedInput2 = euint8.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT8_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).add);\n        return euint8.wrap(result);\n    }\n    /// @notice This functions performs the add operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function add(euint16 lhs, euint16 rhs) internal pure returns (euint16) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint16(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint16(0);\n        }\n        uint256 unwrappedInput1 = euint16.unwrap(lhs);\n        uint256 unwrappedInput2 = euint16.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT16_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).add);\n        return euint16.wrap(result);\n    }\n    /// @notice This functions performs the add operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function add(euint32 lhs, euint32 rhs) internal pure returns (euint32) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint32(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint32(0);\n        }\n        uint256 unwrappedInput1 = euint32.unwrap(lhs);\n        uint256 unwrappedInput2 = euint32.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT32_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).add);\n        return euint32.wrap(result);\n    }\n    /// @notice This functions performs the add operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function add(euint64 lhs, euint64 rhs) internal pure returns (euint64) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint64(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint64(0);\n        }\n        uint256 unwrappedInput1 = euint64.unwrap(lhs);\n        uint256 unwrappedInput2 = euint64.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT64_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).add);\n        return euint64.wrap(result);\n    }\n    /// @notice This functions performs the add operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function add(euint128 lhs, euint128 rhs) internal pure returns (euint128) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint128(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint128(0);\n        }\n        uint256 unwrappedInput1 = euint128.unwrap(lhs);\n        uint256 unwrappedInput2 = euint128.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT128_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).add);\n        return euint128.wrap(result);\n    }\n    /// @notice performs the sealoutput function on a ebool ciphertext. This operation returns the plaintext value, sealed for the public key provided \n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param value Ciphertext to decrypt and seal\n    /// @param publicKey Public Key that will receive the sealed plaintext\n    /// @return Plaintext input, sealed for the owner of `publicKey`\n    function sealoutput(ebool value, bytes32 publicKey) internal pure returns (string memory) {\n        if (!isInitialized(value)) {\n            value = asEbool(0);\n        }\n        uint256 unwrapped = ebool.unwrap(value);\n\n        return Impl.sealoutput(Common.EBOOL_TFHE, unwrapped, publicKey);\n    }\n    /// @notice performs the sealoutput function on a euint8 ciphertext. This operation returns the plaintext value, sealed for the public key provided \n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param value Ciphertext to decrypt and seal\n    /// @param publicKey Public Key that will receive the sealed plaintext\n    /// @return Plaintext input, sealed for the owner of `publicKey`\n    function sealoutput(euint8 value, bytes32 publicKey) internal pure returns (string memory) {\n        if (!isInitialized(value)) {\n            value = asEuint8(0);\n        }\n        uint256 unwrapped = euint8.unwrap(value);\n\n        return Impl.sealoutput(Common.EUINT8_TFHE, unwrapped, publicKey);\n    }\n    /// @notice performs the sealoutput function on a euint16 ciphertext. This operation returns the plaintext value, sealed for the public key provided \n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param value Ciphertext to decrypt and seal\n    /// @param publicKey Public Key that will receive the sealed plaintext\n    /// @return Plaintext input, sealed for the owner of `publicKey`\n    function sealoutput(euint16 value, bytes32 publicKey) internal pure returns (string memory) {\n        if (!isInitialized(value)) {\n            value = asEuint16(0);\n        }\n        uint256 unwrapped = euint16.unwrap(value);\n\n        return Impl.sealoutput(Common.EUINT16_TFHE, unwrapped, publicKey);\n    }\n    /// @notice performs the sealoutput function on a euint32 ciphertext. This operation returns the plaintext value, sealed for the public key provided \n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param value Ciphertext to decrypt and seal\n    /// @param publicKey Public Key that will receive the sealed plaintext\n    /// @return Plaintext input, sealed for the owner of `publicKey`\n    function sealoutput(euint32 value, bytes32 publicKey) internal pure returns (string memory) {\n        if (!isInitialized(value)) {\n            value = asEuint32(0);\n        }\n        uint256 unwrapped = euint32.unwrap(value);\n\n        return Impl.sealoutput(Common.EUINT32_TFHE, unwrapped, publicKey);\n    }\n    /// @notice performs the sealoutput function on a euint64 ciphertext. This operation returns the plaintext value, sealed for the public key provided \n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param value Ciphertext to decrypt and seal\n    /// @param publicKey Public Key that will receive the sealed plaintext\n    /// @return Plaintext input, sealed for the owner of `publicKey`\n    function sealoutput(euint64 value, bytes32 publicKey) internal pure returns (string memory) {\n        if (!isInitialized(value)) {\n            value = asEuint64(0);\n        }\n        uint256 unwrapped = euint64.unwrap(value);\n\n        return Impl.sealoutput(Common.EUINT64_TFHE, unwrapped, publicKey);\n    }\n    /// @notice performs the sealoutput function on a euint128 ciphertext. This operation returns the plaintext value, sealed for the public key provided \n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param value Ciphertext to decrypt and seal\n    /// @param publicKey Public Key that will receive the sealed plaintext\n    /// @return Plaintext input, sealed for the owner of `publicKey`\n    function sealoutput(euint128 value, bytes32 publicKey) internal pure returns (string memory) {\n        if (!isInitialized(value)) {\n            value = asEuint128(0);\n        }\n        uint256 unwrapped = euint128.unwrap(value);\n\n        return Impl.sealoutput(Common.EUINT128_TFHE, unwrapped, publicKey);\n    }\n    /// @notice performs the sealoutput function on a euint256 ciphertext. This operation returns the plaintext value, sealed for the public key provided \n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param value Ciphertext to decrypt and seal\n    /// @param publicKey Public Key that will receive the sealed plaintext\n    /// @return Plaintext input, sealed for the owner of `publicKey`\n    function sealoutput(euint256 value, bytes32 publicKey) internal pure returns (string memory) {\n        if (!isInitialized(value)) {\n            value = asEuint256(0);\n        }\n        uint256 unwrapped = euint256.unwrap(value);\n\n        return Impl.sealoutput(Common.EUINT256_TFHE, unwrapped, publicKey);\n    }\n    /// @notice performs the sealoutput function on a eaddress ciphertext. This operation returns the plaintext value, sealed for the public key provided \n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param value Ciphertext to decrypt and seal\n    /// @param publicKey Public Key that will receive the sealed plaintext\n    /// @return Plaintext input, sealed for the owner of `publicKey`\n    function sealoutput(eaddress value, bytes32 publicKey) internal pure returns (string memory) {\n        if (!isInitialized(value)) {\n            value = asEaddress(0);\n        }\n        uint256 unwrapped = eaddress.unwrap(value);\n\n        return Impl.sealoutput(Common.EADDRESS_TFHE, unwrapped, publicKey);\n    }\n    /// @notice Performs the decrypt operation on a ciphertext\n    /// @dev Verifies that the input value matches a valid ciphertext. Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param input1 the input ciphertext\n    function decrypt(ebool input1) internal pure returns (bool) {\n        if (!isInitialized(input1)) {\n            input1 = asEbool(0);\n        }\n        uint256 unwrappedInput1 = ebool.unwrap(input1);\n        bytes memory inputAsBytes = Common.toBytes(unwrappedInput1);\n        uint256 result = FheOps(Precompiles.Fheos).decrypt(Common.EBOOL_TFHE, inputAsBytes);\n        return Common.bigIntToBool(result);\n    }\n    /// @notice Performs the decrypt operation on a ciphertext\n    /// @dev Verifies that the input value matches a valid ciphertext. Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param input1 the input ciphertext\n    function decrypt(euint8 input1) internal pure returns (uint8) {\n        if (!isInitialized(input1)) {\n            input1 = asEuint8(0);\n        }\n        uint256 unwrappedInput1 = euint8.unwrap(input1);\n        bytes memory inputAsBytes = Common.toBytes(unwrappedInput1);\n        uint256 result = FheOps(Precompiles.Fheos).decrypt(Common.EUINT8_TFHE, inputAsBytes);\n        return Common.bigIntToUint8(result);\n    }\n    /// @notice Performs the decrypt operation on a ciphertext\n    /// @dev Verifies that the input value matches a valid ciphertext. Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param input1 the input ciphertext\n    function decrypt(euint16 input1) internal pure returns (uint16) {\n        if (!isInitialized(input1)) {\n            input1 = asEuint16(0);\n        }\n        uint256 unwrappedInput1 = euint16.unwrap(input1);\n        bytes memory inputAsBytes = Common.toBytes(unwrappedInput1);\n        uint256 result = FheOps(Precompiles.Fheos).decrypt(Common.EUINT16_TFHE, inputAsBytes);\n        return Common.bigIntToUint16(result);\n    }\n    /// @notice Performs the decrypt operation on a ciphertext\n    /// @dev Verifies that the input value matches a valid ciphertext. Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param input1 the input ciphertext\n    function decrypt(euint32 input1) internal pure returns (uint32) {\n        if (!isInitialized(input1)) {\n            input1 = asEuint32(0);\n        }\n        uint256 unwrappedInput1 = euint32.unwrap(input1);\n        bytes memory inputAsBytes = Common.toBytes(unwrappedInput1);\n        uint256 result = FheOps(Precompiles.Fheos).decrypt(Common.EUINT32_TFHE, inputAsBytes);\n        return Common.bigIntToUint32(result);\n    }\n    /// @notice Performs the decrypt operation on a ciphertext\n    /// @dev Verifies that the input value matches a valid ciphertext. Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param input1 the input ciphertext\n    function decrypt(euint64 input1) internal pure returns (uint64) {\n        if (!isInitialized(input1)) {\n            input1 = asEuint64(0);\n        }\n        uint256 unwrappedInput1 = euint64.unwrap(input1);\n        bytes memory inputAsBytes = Common.toBytes(unwrappedInput1);\n        uint256 result = FheOps(Precompiles.Fheos).decrypt(Common.EUINT64_TFHE, inputAsBytes);\n        return Common.bigIntToUint64(result);\n    }\n    /// @notice Performs the decrypt operation on a ciphertext\n    /// @dev Verifies that the input value matches a valid ciphertext. Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param input1 the input ciphertext\n    function decrypt(euint128 input1) internal pure returns (uint128) {\n        if (!isInitialized(input1)) {\n            input1 = asEuint128(0);\n        }\n        uint256 unwrappedInput1 = euint128.unwrap(input1);\n        bytes memory inputAsBytes = Common.toBytes(unwrappedInput1);\n        uint256 result = FheOps(Precompiles.Fheos).decrypt(Common.EUINT128_TFHE, inputAsBytes);\n        return Common.bigIntToUint128(result);\n    }\n    /// @notice Performs the decrypt operation on a ciphertext\n    /// @dev Verifies that the input value matches a valid ciphertext. Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param input1 the input ciphertext\n    function decrypt(euint256 input1) internal pure returns (uint256) {\n        if (!isInitialized(input1)) {\n            input1 = asEuint256(0);\n        }\n        uint256 unwrappedInput1 = euint256.unwrap(input1);\n        bytes memory inputAsBytes = Common.toBytes(unwrappedInput1);\n        uint256 result = FheOps(Precompiles.Fheos).decrypt(Common.EUINT256_TFHE, inputAsBytes);\n        return Common.bigIntToUint256(result);\n    }\n    /// @notice Performs the decrypt operation on a ciphertext\n    /// @dev Verifies that the input value matches a valid ciphertext. Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param input1 the input ciphertext\n    function decrypt(eaddress input1) internal pure returns (address) {\n        if (!isInitialized(input1)) {\n            input1 = asEaddress(0);\n        }\n        uint256 unwrappedInput1 = eaddress.unwrap(input1);\n        bytes memory inputAsBytes = Common.toBytes(unwrappedInput1);\n        uint256 result = FheOps(Precompiles.Fheos).decrypt(Common.EADDRESS_TFHE, inputAsBytes);\n        return Common.bigIntToAddress(result);\n    }\n    /// @notice This functions performs the lte operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function lte(euint8 lhs, euint8 rhs) internal pure returns (ebool) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint8(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint8(0);\n        }\n        uint256 unwrappedInput1 = euint8.unwrap(lhs);\n        uint256 unwrappedInput2 = euint8.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT8_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).lte);\n        return ebool.wrap(result);\n    }\n    /// @notice This functions performs the lte operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function lte(euint16 lhs, euint16 rhs) internal pure returns (ebool) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint16(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint16(0);\n        }\n        uint256 unwrappedInput1 = euint16.unwrap(lhs);\n        uint256 unwrappedInput2 = euint16.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT16_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).lte);\n        return ebool.wrap(result);\n    }\n    /// @notice This functions performs the lte operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function lte(euint32 lhs, euint32 rhs) internal pure returns (ebool) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint32(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint32(0);\n        }\n        uint256 unwrappedInput1 = euint32.unwrap(lhs);\n        uint256 unwrappedInput2 = euint32.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT32_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).lte);\n        return ebool.wrap(result);\n    }\n    /// @notice This functions performs the lte operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function lte(euint64 lhs, euint64 rhs) internal pure returns (ebool) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint64(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint64(0);\n        }\n        uint256 unwrappedInput1 = euint64.unwrap(lhs);\n        uint256 unwrappedInput2 = euint64.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT64_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).lte);\n        return ebool.wrap(result);\n    }\n    /// @notice This functions performs the lte operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function lte(euint128 lhs, euint128 rhs) internal pure returns (ebool) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint128(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint128(0);\n        }\n        uint256 unwrappedInput1 = euint128.unwrap(lhs);\n        uint256 unwrappedInput2 = euint128.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT128_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).lte);\n        return ebool.wrap(result);\n    }\n    /// @notice This functions performs the sub operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function sub(euint8 lhs, euint8 rhs) internal pure returns (euint8) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint8(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint8(0);\n        }\n        uint256 unwrappedInput1 = euint8.unwrap(lhs);\n        uint256 unwrappedInput2 = euint8.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT8_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).sub);\n        return euint8.wrap(result);\n    }\n    /// @notice This functions performs the sub operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function sub(euint16 lhs, euint16 rhs) internal pure returns (euint16) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint16(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint16(0);\n        }\n        uint256 unwrappedInput1 = euint16.unwrap(lhs);\n        uint256 unwrappedInput2 = euint16.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT16_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).sub);\n        return euint16.wrap(result);\n    }\n    /// @notice This functions performs the sub operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function sub(euint32 lhs, euint32 rhs) internal pure returns (euint32) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint32(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint32(0);\n        }\n        uint256 unwrappedInput1 = euint32.unwrap(lhs);\n        uint256 unwrappedInput2 = euint32.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT32_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).sub);\n        return euint32.wrap(result);\n    }\n    /// @notice This functions performs the sub operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function sub(euint64 lhs, euint64 rhs) internal pure returns (euint64) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint64(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint64(0);\n        }\n        uint256 unwrappedInput1 = euint64.unwrap(lhs);\n        uint256 unwrappedInput2 = euint64.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT64_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).sub);\n        return euint64.wrap(result);\n    }\n    /// @notice This functions performs the sub operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function sub(euint128 lhs, euint128 rhs) internal pure returns (euint128) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint128(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint128(0);\n        }\n        uint256 unwrappedInput1 = euint128.unwrap(lhs);\n        uint256 unwrappedInput2 = euint128.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT128_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).sub);\n        return euint128.wrap(result);\n    }\n    /// @notice This functions performs the mul operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function mul(euint8 lhs, euint8 rhs) internal pure returns (euint8) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint8(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint8(0);\n        }\n        uint256 unwrappedInput1 = euint8.unwrap(lhs);\n        uint256 unwrappedInput2 = euint8.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT8_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).mul);\n        return euint8.wrap(result);\n    }\n    /// @notice This functions performs the mul operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function mul(euint16 lhs, euint16 rhs) internal pure returns (euint16) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint16(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint16(0);\n        }\n        uint256 unwrappedInput1 = euint16.unwrap(lhs);\n        uint256 unwrappedInput2 = euint16.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT16_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).mul);\n        return euint16.wrap(result);\n    }\n    /// @notice This functions performs the mul operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function mul(euint32 lhs, euint32 rhs) internal pure returns (euint32) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint32(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint32(0);\n        }\n        uint256 unwrappedInput1 = euint32.unwrap(lhs);\n        uint256 unwrappedInput2 = euint32.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT32_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).mul);\n        return euint32.wrap(result);\n    }\n    /// @notice This functions performs the mul operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function mul(euint64 lhs, euint64 rhs) internal pure returns (euint64) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint64(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint64(0);\n        }\n        uint256 unwrappedInput1 = euint64.unwrap(lhs);\n        uint256 unwrappedInput2 = euint64.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT64_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).mul);\n        return euint64.wrap(result);\n    }\n    /// @notice This functions performs the lt operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function lt(euint8 lhs, euint8 rhs) internal pure returns (ebool) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint8(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint8(0);\n        }\n        uint256 unwrappedInput1 = euint8.unwrap(lhs);\n        uint256 unwrappedInput2 = euint8.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT8_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).lt);\n        return ebool.wrap(result);\n    }\n    /// @notice This functions performs the lt operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function lt(euint16 lhs, euint16 rhs) internal pure returns (ebool) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint16(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint16(0);\n        }\n        uint256 unwrappedInput1 = euint16.unwrap(lhs);\n        uint256 unwrappedInput2 = euint16.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT16_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).lt);\n        return ebool.wrap(result);\n    }\n    /// @notice This functions performs the lt operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function lt(euint32 lhs, euint32 rhs) internal pure returns (ebool) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint32(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint32(0);\n        }\n        uint256 unwrappedInput1 = euint32.unwrap(lhs);\n        uint256 unwrappedInput2 = euint32.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT32_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).lt);\n        return ebool.wrap(result);\n    }\n    /// @notice This functions performs the lt operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function lt(euint64 lhs, euint64 rhs) internal pure returns (ebool) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint64(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint64(0);\n        }\n        uint256 unwrappedInput1 = euint64.unwrap(lhs);\n        uint256 unwrappedInput2 = euint64.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT64_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).lt);\n        return ebool.wrap(result);\n    }\n    /// @notice This functions performs the lt operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function lt(euint128 lhs, euint128 rhs) internal pure returns (ebool) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint128(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint128(0);\n        }\n        uint256 unwrappedInput1 = euint128.unwrap(lhs);\n        uint256 unwrappedInput2 = euint128.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT128_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).lt);\n        return ebool.wrap(result);\n    }\n\n    function select(ebool input1, ebool input2, ebool input3) internal pure returns (ebool) {\n        if (!isInitialized(input1)) {\n            input1 = asEbool(0);\n        }\n        if (!isInitialized(input2)) {\n            input2 = asEbool(0);\n        }\n        if (!isInitialized(input3)) {\n            input3 = asEbool(0);\n        }\n\n        uint256 unwrappedInput1 = ebool.unwrap(input1);\n        uint256 unwrappedInput2 = ebool.unwrap(input2);\n        uint256 unwrappedInput3 = ebool.unwrap(input3);\n\n        uint256 result = Impl.select(Common.EBOOL_TFHE, unwrappedInput1, unwrappedInput2, unwrappedInput3);\n        return ebool.wrap(result);\n    }\n\n    function select(ebool input1, euint8 input2, euint8 input3) internal pure returns (euint8) {\n        if (!isInitialized(input1)) {\n            input1 = asEbool(0);\n        }\n        if (!isInitialized(input2)) {\n            input2 = asEuint8(0);\n        }\n        if (!isInitialized(input3)) {\n            input3 = asEuint8(0);\n        }\n\n        uint256 unwrappedInput1 = ebool.unwrap(input1);\n        uint256 unwrappedInput2 = euint8.unwrap(input2);\n        uint256 unwrappedInput3 = euint8.unwrap(input3);\n\n        uint256 result = Impl.select(Common.EUINT8_TFHE, unwrappedInput1, unwrappedInput2, unwrappedInput3);\n        return euint8.wrap(result);\n    }\n\n    function select(ebool input1, euint16 input2, euint16 input3) internal pure returns (euint16) {\n        if (!isInitialized(input1)) {\n            input1 = asEbool(0);\n        }\n        if (!isInitialized(input2)) {\n            input2 = asEuint16(0);\n        }\n        if (!isInitialized(input3)) {\n            input3 = asEuint16(0);\n        }\n\n        uint256 unwrappedInput1 = ebool.unwrap(input1);\n        uint256 unwrappedInput2 = euint16.unwrap(input2);\n        uint256 unwrappedInput3 = euint16.unwrap(input3);\n\n        uint256 result = Impl.select(Common.EUINT16_TFHE, unwrappedInput1, unwrappedInput2, unwrappedInput3);\n        return euint16.wrap(result);\n    }\n\n    function select(ebool input1, euint32 input2, euint32 input3) internal pure returns (euint32) {\n        if (!isInitialized(input1)) {\n            input1 = asEbool(0);\n        }\n        if (!isInitialized(input2)) {\n            input2 = asEuint32(0);\n        }\n        if (!isInitialized(input3)) {\n            input3 = asEuint32(0);\n        }\n\n        uint256 unwrappedInput1 = ebool.unwrap(input1);\n        uint256 unwrappedInput2 = euint32.unwrap(input2);\n        uint256 unwrappedInput3 = euint32.unwrap(input3);\n\n        uint256 result = Impl.select(Common.EUINT32_TFHE, unwrappedInput1, unwrappedInput2, unwrappedInput3);\n        return euint32.wrap(result);\n    }\n\n    function select(ebool input1, euint64 input2, euint64 input3) internal pure returns (euint64) {\n        if (!isInitialized(input1)) {\n            input1 = asEbool(0);\n        }\n        if (!isInitialized(input2)) {\n            input2 = asEuint64(0);\n        }\n        if (!isInitialized(input3)) {\n            input3 = asEuint64(0);\n        }\n\n        uint256 unwrappedInput1 = ebool.unwrap(input1);\n        uint256 unwrappedInput2 = euint64.unwrap(input2);\n        uint256 unwrappedInput3 = euint64.unwrap(input3);\n\n        uint256 result = Impl.select(Common.EUINT64_TFHE, unwrappedInput1, unwrappedInput2, unwrappedInput3);\n        return euint64.wrap(result);\n    }\n\n    function select(ebool input1, euint128 input2, euint128 input3) internal pure returns (euint128) {\n        if (!isInitialized(input1)) {\n            input1 = asEbool(0);\n        }\n        if (!isInitialized(input2)) {\n            input2 = asEuint128(0);\n        }\n        if (!isInitialized(input3)) {\n            input3 = asEuint128(0);\n        }\n\n        uint256 unwrappedInput1 = ebool.unwrap(input1);\n        uint256 unwrappedInput2 = euint128.unwrap(input2);\n        uint256 unwrappedInput3 = euint128.unwrap(input3);\n\n        uint256 result = Impl.select(Common.EUINT128_TFHE, unwrappedInput1, unwrappedInput2, unwrappedInput3);\n        return euint128.wrap(result);\n    }\n\n    function select(ebool input1, euint256 input2, euint256 input3) internal pure returns (euint256) {\n        if (!isInitialized(input1)) {\n            input1 = asEbool(0);\n        }\n        if (!isInitialized(input2)) {\n            input2 = asEuint256(0);\n        }\n        if (!isInitialized(input3)) {\n            input3 = asEuint256(0);\n        }\n\n        uint256 unwrappedInput1 = ebool.unwrap(input1);\n        uint256 unwrappedInput2 = euint256.unwrap(input2);\n        uint256 unwrappedInput3 = euint256.unwrap(input3);\n\n        uint256 result = Impl.select(Common.EUINT256_TFHE, unwrappedInput1, unwrappedInput2, unwrappedInput3);\n        return euint256.wrap(result);\n    }\n\n    function select(ebool input1, eaddress input2, eaddress input3) internal pure returns (eaddress) {\n        if (!isInitialized(input1)) {\n            input1 = asEbool(0);\n        }\n        if (!isInitialized(input2)) {\n            input2 = asEaddress(0);\n        }\n        if (!isInitialized(input3)) {\n            input3 = asEaddress(0);\n        }\n\n        uint256 unwrappedInput1 = ebool.unwrap(input1);\n        uint256 unwrappedInput2 = eaddress.unwrap(input2);\n        uint256 unwrappedInput3 = eaddress.unwrap(input3);\n\n        uint256 result = Impl.select(Common.EADDRESS_TFHE, unwrappedInput1, unwrappedInput2, unwrappedInput3);\n        return eaddress.wrap(result);\n    }\n    /// @notice Performs the req operation on a ciphertext\n    /// @dev Verifies that the input value matches a valid ciphertext. Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param input1 the input ciphertext\n    function req(ebool input1) internal pure  {\n        if (!isInitialized(input1)) {\n            input1 = asEbool(0);\n        }\n        uint256 unwrappedInput1 = ebool.unwrap(input1);\n        bytes memory inputAsBytes = Common.toBytes(unwrappedInput1);\n        FheOps(Precompiles.Fheos).req(Common.EBOOL_TFHE, inputAsBytes);\n    }\n    /// @notice Performs the req operation on a ciphertext\n    /// @dev Verifies that the input value matches a valid ciphertext. Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param input1 the input ciphertext\n    function req(euint8 input1) internal pure  {\n        if (!isInitialized(input1)) {\n            input1 = asEuint8(0);\n        }\n        uint256 unwrappedInput1 = euint8.unwrap(input1);\n        bytes memory inputAsBytes = Common.toBytes(unwrappedInput1);\n        FheOps(Precompiles.Fheos).req(Common.EUINT8_TFHE, inputAsBytes);\n    }\n    /// @notice Performs the req operation on a ciphertext\n    /// @dev Verifies that the input value matches a valid ciphertext. Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param input1 the input ciphertext\n    function req(euint16 input1) internal pure  {\n        if (!isInitialized(input1)) {\n            input1 = asEuint16(0);\n        }\n        uint256 unwrappedInput1 = euint16.unwrap(input1);\n        bytes memory inputAsBytes = Common.toBytes(unwrappedInput1);\n        FheOps(Precompiles.Fheos).req(Common.EUINT16_TFHE, inputAsBytes);\n    }\n    /// @notice Performs the req operation on a ciphertext\n    /// @dev Verifies that the input value matches a valid ciphertext. Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param input1 the input ciphertext\n    function req(euint32 input1) internal pure  {\n        if (!isInitialized(input1)) {\n            input1 = asEuint32(0);\n        }\n        uint256 unwrappedInput1 = euint32.unwrap(input1);\n        bytes memory inputAsBytes = Common.toBytes(unwrappedInput1);\n        FheOps(Precompiles.Fheos).req(Common.EUINT32_TFHE, inputAsBytes);\n    }\n    /// @notice Performs the req operation on a ciphertext\n    /// @dev Verifies that the input value matches a valid ciphertext. Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param input1 the input ciphertext\n    function req(euint64 input1) internal pure  {\n        if (!isInitialized(input1)) {\n            input1 = asEuint64(0);\n        }\n        uint256 unwrappedInput1 = euint64.unwrap(input1);\n        bytes memory inputAsBytes = Common.toBytes(unwrappedInput1);\n        FheOps(Precompiles.Fheos).req(Common.EUINT64_TFHE, inputAsBytes);\n    }\n    /// @notice Performs the req operation on a ciphertext\n    /// @dev Verifies that the input value matches a valid ciphertext. Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param input1 the input ciphertext\n    function req(euint128 input1) internal pure  {\n        if (!isInitialized(input1)) {\n            input1 = asEuint128(0);\n        }\n        uint256 unwrappedInput1 = euint128.unwrap(input1);\n        bytes memory inputAsBytes = Common.toBytes(unwrappedInput1);\n        FheOps(Precompiles.Fheos).req(Common.EUINT128_TFHE, inputAsBytes);\n    }\n    /// @notice Performs the req operation on a ciphertext\n    /// @dev Verifies that the input value matches a valid ciphertext. Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param input1 the input ciphertext\n    function req(euint256 input1) internal pure  {\n        if (!isInitialized(input1)) {\n            input1 = asEuint256(0);\n        }\n        uint256 unwrappedInput1 = euint256.unwrap(input1);\n        bytes memory inputAsBytes = Common.toBytes(unwrappedInput1);\n        FheOps(Precompiles.Fheos).req(Common.EUINT256_TFHE, inputAsBytes);\n    }\n    /// @notice This functions performs the div operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function div(euint8 lhs, euint8 rhs) internal pure returns (euint8) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint8(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint8(0);\n        }\n        uint256 unwrappedInput1 = euint8.unwrap(lhs);\n        uint256 unwrappedInput2 = euint8.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT8_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).div);\n        return euint8.wrap(result);\n    }\n    /// @notice This functions performs the div operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function div(euint16 lhs, euint16 rhs) internal pure returns (euint16) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint16(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint16(0);\n        }\n        uint256 unwrappedInput1 = euint16.unwrap(lhs);\n        uint256 unwrappedInput2 = euint16.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT16_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).div);\n        return euint16.wrap(result);\n    }\n    /// @notice This functions performs the div operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function div(euint32 lhs, euint32 rhs) internal pure returns (euint32) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint32(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint32(0);\n        }\n        uint256 unwrappedInput1 = euint32.unwrap(lhs);\n        uint256 unwrappedInput2 = euint32.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT32_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).div);\n        return euint32.wrap(result);\n    }\n    /// @notice This functions performs the gt operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function gt(euint8 lhs, euint8 rhs) internal pure returns (ebool) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint8(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint8(0);\n        }\n        uint256 unwrappedInput1 = euint8.unwrap(lhs);\n        uint256 unwrappedInput2 = euint8.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT8_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).gt);\n        return ebool.wrap(result);\n    }\n    /// @notice This functions performs the gt operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function gt(euint16 lhs, euint16 rhs) internal pure returns (ebool) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint16(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint16(0);\n        }\n        uint256 unwrappedInput1 = euint16.unwrap(lhs);\n        uint256 unwrappedInput2 = euint16.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT16_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).gt);\n        return ebool.wrap(result);\n    }\n    /// @notice This functions performs the gt operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function gt(euint32 lhs, euint32 rhs) internal pure returns (ebool) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint32(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint32(0);\n        }\n        uint256 unwrappedInput1 = euint32.unwrap(lhs);\n        uint256 unwrappedInput2 = euint32.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT32_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).gt);\n        return ebool.wrap(result);\n    }\n    /// @notice This functions performs the gt operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function gt(euint64 lhs, euint64 rhs) internal pure returns (ebool) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint64(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint64(0);\n        }\n        uint256 unwrappedInput1 = euint64.unwrap(lhs);\n        uint256 unwrappedInput2 = euint64.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT64_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).gt);\n        return ebool.wrap(result);\n    }\n    /// @notice This functions performs the gt operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function gt(euint128 lhs, euint128 rhs) internal pure returns (ebool) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint128(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint128(0);\n        }\n        uint256 unwrappedInput1 = euint128.unwrap(lhs);\n        uint256 unwrappedInput2 = euint128.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT128_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).gt);\n        return ebool.wrap(result);\n    }\n    /// @notice This functions performs the gte operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function gte(euint8 lhs, euint8 rhs) internal pure returns (ebool) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint8(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint8(0);\n        }\n        uint256 unwrappedInput1 = euint8.unwrap(lhs);\n        uint256 unwrappedInput2 = euint8.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT8_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).gte);\n        return ebool.wrap(result);\n    }\n    /// @notice This functions performs the gte operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function gte(euint16 lhs, euint16 rhs) internal pure returns (ebool) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint16(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint16(0);\n        }\n        uint256 unwrappedInput1 = euint16.unwrap(lhs);\n        uint256 unwrappedInput2 = euint16.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT16_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).gte);\n        return ebool.wrap(result);\n    }\n    /// @notice This functions performs the gte operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function gte(euint32 lhs, euint32 rhs) internal pure returns (ebool) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint32(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint32(0);\n        }\n        uint256 unwrappedInput1 = euint32.unwrap(lhs);\n        uint256 unwrappedInput2 = euint32.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT32_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).gte);\n        return ebool.wrap(result);\n    }\n    /// @notice This functions performs the gte operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function gte(euint64 lhs, euint64 rhs) internal pure returns (ebool) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint64(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint64(0);\n        }\n        uint256 unwrappedInput1 = euint64.unwrap(lhs);\n        uint256 unwrappedInput2 = euint64.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT64_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).gte);\n        return ebool.wrap(result);\n    }\n    /// @notice This functions performs the gte operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function gte(euint128 lhs, euint128 rhs) internal pure returns (ebool) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint128(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint128(0);\n        }\n        uint256 unwrappedInput1 = euint128.unwrap(lhs);\n        uint256 unwrappedInput2 = euint128.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT128_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).gte);\n        return ebool.wrap(result);\n    }\n    /// @notice This functions performs the rem operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function rem(euint8 lhs, euint8 rhs) internal pure returns (euint8) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint8(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint8(0);\n        }\n        uint256 unwrappedInput1 = euint8.unwrap(lhs);\n        uint256 unwrappedInput2 = euint8.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT8_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).rem);\n        return euint8.wrap(result);\n    }\n    /// @notice This functions performs the rem operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function rem(euint16 lhs, euint16 rhs) internal pure returns (euint16) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint16(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint16(0);\n        }\n        uint256 unwrappedInput1 = euint16.unwrap(lhs);\n        uint256 unwrappedInput2 = euint16.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT16_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).rem);\n        return euint16.wrap(result);\n    }\n    /// @notice This functions performs the rem operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function rem(euint32 lhs, euint32 rhs) internal pure returns (euint32) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint32(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint32(0);\n        }\n        uint256 unwrappedInput1 = euint32.unwrap(lhs);\n        uint256 unwrappedInput2 = euint32.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT32_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).rem);\n        return euint32.wrap(result);\n    }\n    /// @notice This functions performs the and operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function and(ebool lhs, ebool rhs) internal pure returns (ebool) {\n        if (!isInitialized(lhs)) {\n            lhs = asEbool(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEbool(0);\n        }\n        uint256 unwrappedInput1 = ebool.unwrap(lhs);\n        uint256 unwrappedInput2 = ebool.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EBOOL_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).and);\n        return ebool.wrap(result);\n    }\n    /// @notice This functions performs the and operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function and(euint8 lhs, euint8 rhs) internal pure returns (euint8) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint8(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint8(0);\n        }\n        uint256 unwrappedInput1 = euint8.unwrap(lhs);\n        uint256 unwrappedInput2 = euint8.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT8_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).and);\n        return euint8.wrap(result);\n    }\n    /// @notice This functions performs the and operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function and(euint16 lhs, euint16 rhs) internal pure returns (euint16) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint16(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint16(0);\n        }\n        uint256 unwrappedInput1 = euint16.unwrap(lhs);\n        uint256 unwrappedInput2 = euint16.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT16_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).and);\n        return euint16.wrap(result);\n    }\n    /// @notice This functions performs the and operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function and(euint32 lhs, euint32 rhs) internal pure returns (euint32) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint32(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint32(0);\n        }\n        uint256 unwrappedInput1 = euint32.unwrap(lhs);\n        uint256 unwrappedInput2 = euint32.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT32_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).and);\n        return euint32.wrap(result);\n    }\n    /// @notice This functions performs the and operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function and(euint64 lhs, euint64 rhs) internal pure returns (euint64) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint64(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint64(0);\n        }\n        uint256 unwrappedInput1 = euint64.unwrap(lhs);\n        uint256 unwrappedInput2 = euint64.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT64_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).and);\n        return euint64.wrap(result);\n    }\n    /// @notice This functions performs the and operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function and(euint128 lhs, euint128 rhs) internal pure returns (euint128) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint128(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint128(0);\n        }\n        uint256 unwrappedInput1 = euint128.unwrap(lhs);\n        uint256 unwrappedInput2 = euint128.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT128_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).and);\n        return euint128.wrap(result);\n    }\n    /// @notice This functions performs the or operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function or(ebool lhs, ebool rhs) internal pure returns (ebool) {\n        if (!isInitialized(lhs)) {\n            lhs = asEbool(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEbool(0);\n        }\n        uint256 unwrappedInput1 = ebool.unwrap(lhs);\n        uint256 unwrappedInput2 = ebool.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EBOOL_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).or);\n        return ebool.wrap(result);\n    }\n    /// @notice This functions performs the or operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function or(euint8 lhs, euint8 rhs) internal pure returns (euint8) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint8(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint8(0);\n        }\n        uint256 unwrappedInput1 = euint8.unwrap(lhs);\n        uint256 unwrappedInput2 = euint8.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT8_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).or);\n        return euint8.wrap(result);\n    }\n    /// @notice This functions performs the or operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function or(euint16 lhs, euint16 rhs) internal pure returns (euint16) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint16(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint16(0);\n        }\n        uint256 unwrappedInput1 = euint16.unwrap(lhs);\n        uint256 unwrappedInput2 = euint16.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT16_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).or);\n        return euint16.wrap(result);\n    }\n    /// @notice This functions performs the or operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function or(euint32 lhs, euint32 rhs) internal pure returns (euint32) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint32(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint32(0);\n        }\n        uint256 unwrappedInput1 = euint32.unwrap(lhs);\n        uint256 unwrappedInput2 = euint32.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT32_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).or);\n        return euint32.wrap(result);\n    }\n    /// @notice This functions performs the or operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function or(euint64 lhs, euint64 rhs) internal pure returns (euint64) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint64(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint64(0);\n        }\n        uint256 unwrappedInput1 = euint64.unwrap(lhs);\n        uint256 unwrappedInput2 = euint64.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT64_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).or);\n        return euint64.wrap(result);\n    }\n    /// @notice This functions performs the or operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function or(euint128 lhs, euint128 rhs) internal pure returns (euint128) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint128(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint128(0);\n        }\n        uint256 unwrappedInput1 = euint128.unwrap(lhs);\n        uint256 unwrappedInput2 = euint128.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT128_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).or);\n        return euint128.wrap(result);\n    }\n    /// @notice This functions performs the xor operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function xor(ebool lhs, ebool rhs) internal pure returns (ebool) {\n        if (!isInitialized(lhs)) {\n            lhs = asEbool(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEbool(0);\n        }\n        uint256 unwrappedInput1 = ebool.unwrap(lhs);\n        uint256 unwrappedInput2 = ebool.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EBOOL_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).xor);\n        return ebool.wrap(result);\n    }\n    /// @notice This functions performs the xor operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function xor(euint8 lhs, euint8 rhs) internal pure returns (euint8) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint8(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint8(0);\n        }\n        uint256 unwrappedInput1 = euint8.unwrap(lhs);\n        uint256 unwrappedInput2 = euint8.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT8_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).xor);\n        return euint8.wrap(result);\n    }\n    /// @notice This functions performs the xor operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function xor(euint16 lhs, euint16 rhs) internal pure returns (euint16) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint16(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint16(0);\n        }\n        uint256 unwrappedInput1 = euint16.unwrap(lhs);\n        uint256 unwrappedInput2 = euint16.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT16_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).xor);\n        return euint16.wrap(result);\n    }\n    /// @notice This functions performs the xor operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function xor(euint32 lhs, euint32 rhs) internal pure returns (euint32) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint32(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint32(0);\n        }\n        uint256 unwrappedInput1 = euint32.unwrap(lhs);\n        uint256 unwrappedInput2 = euint32.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT32_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).xor);\n        return euint32.wrap(result);\n    }\n    /// @notice This functions performs the xor operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function xor(euint64 lhs, euint64 rhs) internal pure returns (euint64) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint64(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint64(0);\n        }\n        uint256 unwrappedInput1 = euint64.unwrap(lhs);\n        uint256 unwrappedInput2 = euint64.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT64_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).xor);\n        return euint64.wrap(result);\n    }\n    /// @notice This functions performs the xor operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function xor(euint128 lhs, euint128 rhs) internal pure returns (euint128) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint128(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint128(0);\n        }\n        uint256 unwrappedInput1 = euint128.unwrap(lhs);\n        uint256 unwrappedInput2 = euint128.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT128_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).xor);\n        return euint128.wrap(result);\n    }\n    /// @notice This functions performs the eq operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function eq(ebool lhs, ebool rhs) internal pure returns (ebool) {\n        if (!isInitialized(lhs)) {\n            lhs = asEbool(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEbool(0);\n        }\n        uint256 unwrappedInput1 = ebool.unwrap(lhs);\n        uint256 unwrappedInput2 = ebool.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EBOOL_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).eq);\n        return ebool.wrap(result);\n    }\n    /// @notice This functions performs the eq operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function eq(euint8 lhs, euint8 rhs) internal pure returns (ebool) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint8(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint8(0);\n        }\n        uint256 unwrappedInput1 = euint8.unwrap(lhs);\n        uint256 unwrappedInput2 = euint8.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT8_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).eq);\n        return ebool.wrap(result);\n    }\n    /// @notice This functions performs the eq operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function eq(euint16 lhs, euint16 rhs) internal pure returns (ebool) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint16(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint16(0);\n        }\n        uint256 unwrappedInput1 = euint16.unwrap(lhs);\n        uint256 unwrappedInput2 = euint16.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT16_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).eq);\n        return ebool.wrap(result);\n    }\n    /// @notice This functions performs the eq operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function eq(euint32 lhs, euint32 rhs) internal pure returns (ebool) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint32(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint32(0);\n        }\n        uint256 unwrappedInput1 = euint32.unwrap(lhs);\n        uint256 unwrappedInput2 = euint32.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT32_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).eq);\n        return ebool.wrap(result);\n    }\n    /// @notice This functions performs the eq operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function eq(euint64 lhs, euint64 rhs) internal pure returns (ebool) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint64(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint64(0);\n        }\n        uint256 unwrappedInput1 = euint64.unwrap(lhs);\n        uint256 unwrappedInput2 = euint64.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT64_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).eq);\n        return ebool.wrap(result);\n    }\n    /// @notice This functions performs the eq operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function eq(euint128 lhs, euint128 rhs) internal pure returns (ebool) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint128(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint128(0);\n        }\n        uint256 unwrappedInput1 = euint128.unwrap(lhs);\n        uint256 unwrappedInput2 = euint128.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT128_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).eq);\n        return ebool.wrap(result);\n    }\n    /// @notice This functions performs the eq operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function eq(euint256 lhs, euint256 rhs) internal pure returns (ebool) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint256(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint256(0);\n        }\n        uint256 unwrappedInput1 = euint256.unwrap(lhs);\n        uint256 unwrappedInput2 = euint256.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT256_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).eq);\n        return ebool.wrap(result);\n    }\n    /// @notice This functions performs the eq operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function eq(eaddress lhs, eaddress rhs) internal pure returns (ebool) {\n        if (!isInitialized(lhs)) {\n            lhs = asEaddress(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEaddress(0);\n        }\n        uint256 unwrappedInput1 = eaddress.unwrap(lhs);\n        uint256 unwrappedInput2 = eaddress.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EADDRESS_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).eq);\n        return ebool.wrap(result);\n    }\n    /// @notice This functions performs the ne operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function ne(ebool lhs, ebool rhs) internal pure returns (ebool) {\n        if (!isInitialized(lhs)) {\n            lhs = asEbool(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEbool(0);\n        }\n        uint256 unwrappedInput1 = ebool.unwrap(lhs);\n        uint256 unwrappedInput2 = ebool.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EBOOL_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).ne);\n        return ebool.wrap(result);\n    }\n    /// @notice This functions performs the ne operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function ne(euint8 lhs, euint8 rhs) internal pure returns (ebool) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint8(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint8(0);\n        }\n        uint256 unwrappedInput1 = euint8.unwrap(lhs);\n        uint256 unwrappedInput2 = euint8.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT8_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).ne);\n        return ebool.wrap(result);\n    }\n    /// @notice This functions performs the ne operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function ne(euint16 lhs, euint16 rhs) internal pure returns (ebool) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint16(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint16(0);\n        }\n        uint256 unwrappedInput1 = euint16.unwrap(lhs);\n        uint256 unwrappedInput2 = euint16.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT16_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).ne);\n        return ebool.wrap(result);\n    }\n    /// @notice This functions performs the ne operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function ne(euint32 lhs, euint32 rhs) internal pure returns (ebool) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint32(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint32(0);\n        }\n        uint256 unwrappedInput1 = euint32.unwrap(lhs);\n        uint256 unwrappedInput2 = euint32.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT32_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).ne);\n        return ebool.wrap(result);\n    }\n    /// @notice This functions performs the ne operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function ne(euint64 lhs, euint64 rhs) internal pure returns (ebool) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint64(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint64(0);\n        }\n        uint256 unwrappedInput1 = euint64.unwrap(lhs);\n        uint256 unwrappedInput2 = euint64.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT64_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).ne);\n        return ebool.wrap(result);\n    }\n    /// @notice This functions performs the ne operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function ne(euint128 lhs, euint128 rhs) internal pure returns (ebool) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint128(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint128(0);\n        }\n        uint256 unwrappedInput1 = euint128.unwrap(lhs);\n        uint256 unwrappedInput2 = euint128.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT128_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).ne);\n        return ebool.wrap(result);\n    }\n    /// @notice This functions performs the ne operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function ne(euint256 lhs, euint256 rhs) internal pure returns (ebool) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint256(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint256(0);\n        }\n        uint256 unwrappedInput1 = euint256.unwrap(lhs);\n        uint256 unwrappedInput2 = euint256.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT256_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).ne);\n        return ebool.wrap(result);\n    }\n    /// @notice This functions performs the ne operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function ne(eaddress lhs, eaddress rhs) internal pure returns (ebool) {\n        if (!isInitialized(lhs)) {\n            lhs = asEaddress(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEaddress(0);\n        }\n        uint256 unwrappedInput1 = eaddress.unwrap(lhs);\n        uint256 unwrappedInput2 = eaddress.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EADDRESS_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).ne);\n        return ebool.wrap(result);\n    }\n    /// @notice This functions performs the min operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function min(euint8 lhs, euint8 rhs) internal pure returns (euint8) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint8(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint8(0);\n        }\n        uint256 unwrappedInput1 = euint8.unwrap(lhs);\n        uint256 unwrappedInput2 = euint8.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT8_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).min);\n        return euint8.wrap(result);\n    }\n    /// @notice This functions performs the min operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function min(euint16 lhs, euint16 rhs) internal pure returns (euint16) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint16(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint16(0);\n        }\n        uint256 unwrappedInput1 = euint16.unwrap(lhs);\n        uint256 unwrappedInput2 = euint16.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT16_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).min);\n        return euint16.wrap(result);\n    }\n    /// @notice This functions performs the min operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function min(euint32 lhs, euint32 rhs) internal pure returns (euint32) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint32(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint32(0);\n        }\n        uint256 unwrappedInput1 = euint32.unwrap(lhs);\n        uint256 unwrappedInput2 = euint32.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT32_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).min);\n        return euint32.wrap(result);\n    }\n    /// @notice This functions performs the min operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function min(euint64 lhs, euint64 rhs) internal pure returns (euint64) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint64(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint64(0);\n        }\n        uint256 unwrappedInput1 = euint64.unwrap(lhs);\n        uint256 unwrappedInput2 = euint64.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT64_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).min);\n        return euint64.wrap(result);\n    }\n    /// @notice This functions performs the min operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function min(euint128 lhs, euint128 rhs) internal pure returns (euint128) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint128(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint128(0);\n        }\n        uint256 unwrappedInput1 = euint128.unwrap(lhs);\n        uint256 unwrappedInput2 = euint128.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT128_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).min);\n        return euint128.wrap(result);\n    }\n    /// @notice This functions performs the max operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function max(euint8 lhs, euint8 rhs) internal pure returns (euint8) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint8(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint8(0);\n        }\n        uint256 unwrappedInput1 = euint8.unwrap(lhs);\n        uint256 unwrappedInput2 = euint8.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT8_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).max);\n        return euint8.wrap(result);\n    }\n    /// @notice This functions performs the max operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function max(euint16 lhs, euint16 rhs) internal pure returns (euint16) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint16(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint16(0);\n        }\n        uint256 unwrappedInput1 = euint16.unwrap(lhs);\n        uint256 unwrappedInput2 = euint16.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT16_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).max);\n        return euint16.wrap(result);\n    }\n    /// @notice This functions performs the max operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function max(euint32 lhs, euint32 rhs) internal pure returns (euint32) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint32(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint32(0);\n        }\n        uint256 unwrappedInput1 = euint32.unwrap(lhs);\n        uint256 unwrappedInput2 = euint32.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT32_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).max);\n        return euint32.wrap(result);\n    }\n    /// @notice This functions performs the max operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function max(euint64 lhs, euint64 rhs) internal pure returns (euint64) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint64(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint64(0);\n        }\n        uint256 unwrappedInput1 = euint64.unwrap(lhs);\n        uint256 unwrappedInput2 = euint64.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT64_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).max);\n        return euint64.wrap(result);\n    }\n    /// @notice This functions performs the max operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function max(euint128 lhs, euint128 rhs) internal pure returns (euint128) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint128(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint128(0);\n        }\n        uint256 unwrappedInput1 = euint128.unwrap(lhs);\n        uint256 unwrappedInput2 = euint128.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT128_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).max);\n        return euint128.wrap(result);\n    }\n    /// @notice This functions performs the shl operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function shl(euint8 lhs, euint8 rhs) internal pure returns (euint8) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint8(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint8(0);\n        }\n        uint256 unwrappedInput1 = euint8.unwrap(lhs);\n        uint256 unwrappedInput2 = euint8.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT8_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).shl);\n        return euint8.wrap(result);\n    }\n    /// @notice This functions performs the shl operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function shl(euint16 lhs, euint16 rhs) internal pure returns (euint16) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint16(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint16(0);\n        }\n        uint256 unwrappedInput1 = euint16.unwrap(lhs);\n        uint256 unwrappedInput2 = euint16.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT16_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).shl);\n        return euint16.wrap(result);\n    }\n    /// @notice This functions performs the shl operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function shl(euint32 lhs, euint32 rhs) internal pure returns (euint32) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint32(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint32(0);\n        }\n        uint256 unwrappedInput1 = euint32.unwrap(lhs);\n        uint256 unwrappedInput2 = euint32.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT32_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).shl);\n        return euint32.wrap(result);\n    }\n    /// @notice This functions performs the shl operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function shl(euint64 lhs, euint64 rhs) internal pure returns (euint64) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint64(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint64(0);\n        }\n        uint256 unwrappedInput1 = euint64.unwrap(lhs);\n        uint256 unwrappedInput2 = euint64.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT64_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).shl);\n        return euint64.wrap(result);\n    }\n    /// @notice This functions performs the shl operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function shl(euint128 lhs, euint128 rhs) internal pure returns (euint128) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint128(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint128(0);\n        }\n        uint256 unwrappedInput1 = euint128.unwrap(lhs);\n        uint256 unwrappedInput2 = euint128.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT128_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).shl);\n        return euint128.wrap(result);\n    }\n    /// @notice This functions performs the shr operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function shr(euint8 lhs, euint8 rhs) internal pure returns (euint8) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint8(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint8(0);\n        }\n        uint256 unwrappedInput1 = euint8.unwrap(lhs);\n        uint256 unwrappedInput2 = euint8.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT8_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).shr);\n        return euint8.wrap(result);\n    }\n    /// @notice This functions performs the shr operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function shr(euint16 lhs, euint16 rhs) internal pure returns (euint16) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint16(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint16(0);\n        }\n        uint256 unwrappedInput1 = euint16.unwrap(lhs);\n        uint256 unwrappedInput2 = euint16.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT16_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).shr);\n        return euint16.wrap(result);\n    }\n    /// @notice This functions performs the shr operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function shr(euint32 lhs, euint32 rhs) internal pure returns (euint32) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint32(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint32(0);\n        }\n        uint256 unwrappedInput1 = euint32.unwrap(lhs);\n        uint256 unwrappedInput2 = euint32.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT32_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).shr);\n        return euint32.wrap(result);\n    }\n    /// @notice This functions performs the shr operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function shr(euint64 lhs, euint64 rhs) internal pure returns (euint64) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint64(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint64(0);\n        }\n        uint256 unwrappedInput1 = euint64.unwrap(lhs);\n        uint256 unwrappedInput2 = euint64.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT64_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).shr);\n        return euint64.wrap(result);\n    }\n    /// @notice This functions performs the shr operation\n    /// @dev If any of the inputs are expected to be a ciphertext, it verifies that the value matches a valid ciphertext\n    ///Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs The first input \n    /// @param rhs The second input\n    /// @return The result of the operation\n    function shr(euint128 lhs, euint128 rhs) internal pure returns (euint128) {\n        if (!isInitialized(lhs)) {\n            lhs = asEuint128(0);\n        }\n        if (!isInitialized(rhs)) {\n            rhs = asEuint128(0);\n        }\n        uint256 unwrappedInput1 = euint128.unwrap(lhs);\n        uint256 unwrappedInput2 = euint128.unwrap(rhs);\n\n        uint256 result = mathHelper(Common.EUINT128_TFHE, unwrappedInput1, unwrappedInput2, FheOps(Precompiles.Fheos).shr);\n        return euint128.wrap(result);\n    }\n\n    /// @notice Performs the \"not\" for the ebool type\n    /// @dev Implemented by a workaround due to ebool being a euint8 type behind the scenes, therefore xor is needed to assure that not(true) = false and vise-versa\n    /// @param value input ebool ciphertext\n    /// @return Result of the not operation on `value` \n    function not(ebool value) internal pure returns (ebool) {\n        return xor(value, asEbool(true));\n    }\n    /// @notice Performs the not operation on a ciphertext\n    /// @dev Verifies that the input value matches a valid ciphertext. Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param input1 the input ciphertext\n    function not(euint8 input1) internal pure returns (euint8) {\n        if (!isInitialized(input1)) {\n            input1 = asEuint8(0);\n        }\n        uint256 unwrappedInput1 = euint8.unwrap(input1);\n        bytes memory inputAsBytes = Common.toBytes(unwrappedInput1);\n        bytes memory b = FheOps(Precompiles.Fheos).not(Common.EUINT8_TFHE, inputAsBytes);\n        uint256 result = Impl.getValue(b);\n        return euint8.wrap(result);\n    }\n    /// @notice Performs the not operation on a ciphertext\n    /// @dev Verifies that the input value matches a valid ciphertext. Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param input1 the input ciphertext\n    function not(euint16 input1) internal pure returns (euint16) {\n        if (!isInitialized(input1)) {\n            input1 = asEuint16(0);\n        }\n        uint256 unwrappedInput1 = euint16.unwrap(input1);\n        bytes memory inputAsBytes = Common.toBytes(unwrappedInput1);\n        bytes memory b = FheOps(Precompiles.Fheos).not(Common.EUINT16_TFHE, inputAsBytes);\n        uint256 result = Impl.getValue(b);\n        return euint16.wrap(result);\n    }\n    /// @notice Performs the not operation on a ciphertext\n    /// @dev Verifies that the input value matches a valid ciphertext. Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param input1 the input ciphertext\n    function not(euint32 input1) internal pure returns (euint32) {\n        if (!isInitialized(input1)) {\n            input1 = asEuint32(0);\n        }\n        uint256 unwrappedInput1 = euint32.unwrap(input1);\n        bytes memory inputAsBytes = Common.toBytes(unwrappedInput1);\n        bytes memory b = FheOps(Precompiles.Fheos).not(Common.EUINT32_TFHE, inputAsBytes);\n        uint256 result = Impl.getValue(b);\n        return euint32.wrap(result);\n    }\n    /// @notice Performs the not operation on a ciphertext\n    /// @dev Verifies that the input value matches a valid ciphertext. Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param input1 the input ciphertext\n    function not(euint64 input1) internal pure returns (euint64) {\n        if (!isInitialized(input1)) {\n            input1 = asEuint64(0);\n        }\n        uint256 unwrappedInput1 = euint64.unwrap(input1);\n        bytes memory inputAsBytes = Common.toBytes(unwrappedInput1);\n        bytes memory b = FheOps(Precompiles.Fheos).not(Common.EUINT64_TFHE, inputAsBytes);\n        uint256 result = Impl.getValue(b);\n        return euint64.wrap(result);\n    }\n    /// @notice Performs the not operation on a ciphertext\n    /// @dev Verifies that the input value matches a valid ciphertext. Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param input1 the input ciphertext\n    function not(euint128 input1) internal pure returns (euint128) {\n        if (!isInitialized(input1)) {\n            input1 = asEuint128(0);\n        }\n        uint256 unwrappedInput1 = euint128.unwrap(input1);\n        bytes memory inputAsBytes = Common.toBytes(unwrappedInput1);\n        bytes memory b = FheOps(Precompiles.Fheos).not(Common.EUINT128_TFHE, inputAsBytes);\n        uint256 result = Impl.getValue(b);\n        return euint128.wrap(result);\n    }\n\n    // ********** TYPE CASTING ************* //\n    /// @notice Parses input ciphertexts from the user. Converts from encrypted raw bytes to an ebool\n    /// @dev Also performs validation that the ciphertext is valid and has been encrypted using the network encryption key\n    /// @return a ciphertext representation of the input\n    function asEbool(inEbool memory value) internal pure returns (ebool) {\n        return FHE.asEbool(value.data);\n    }\n    /// @notice Converts a ebool to an euint8\n    function asEuint8(ebool value) internal pure returns (euint8) {\n        return euint8.wrap(Impl.cast(Common.EBOOL_TFHE, ebool.unwrap(value), Common.EUINT8_TFHE));\n    }\n    /// @notice Converts a ebool to an euint16\n    function asEuint16(ebool value) internal pure returns (euint16) {\n        return euint16.wrap(Impl.cast(Common.EBOOL_TFHE, ebool.unwrap(value), Common.EUINT16_TFHE));\n    }\n    /// @notice Converts a ebool to an euint32\n    function asEuint32(ebool value) internal pure returns (euint32) {\n        return euint32.wrap(Impl.cast(Common.EBOOL_TFHE, ebool.unwrap(value), Common.EUINT32_TFHE));\n    }\n    /// @notice Converts a ebool to an euint64\n    function asEuint64(ebool value) internal pure returns (euint64) {\n        return euint64.wrap(Impl.cast(Common.EBOOL_TFHE, ebool.unwrap(value), Common.EUINT64_TFHE));\n    }\n    /// @notice Converts a ebool to an euint128\n    function asEuint128(ebool value) internal pure returns (euint128) {\n        return euint128.wrap(Impl.cast(Common.EBOOL_TFHE, ebool.unwrap(value), Common.EUINT128_TFHE));\n    }\n    /// @notice Converts a ebool to an euint256\n    function asEuint256(ebool value) internal pure returns (euint256) {\n        return euint256.wrap(Impl.cast(Common.EBOOL_TFHE, ebool.unwrap(value), Common.EUINT256_TFHE));\n    }\n    /// @notice Converts a ebool to an eaddress\n    function asEaddress(ebool value) internal pure returns (eaddress) {\n        return eaddress.wrap(Impl.cast(Common.EBOOL_TFHE, ebool.unwrap(value), Common.EADDRESS_TFHE));\n    }\n    \n    /// @notice Converts a euint8 to an ebool\n    function asEbool(euint8 value) internal pure returns (ebool) {\n        return ne(value, asEuint8(0));\n    }\n    /// @notice Parses input ciphertexts from the user. Converts from encrypted raw bytes to an euint8\n    /// @dev Also performs validation that the ciphertext is valid and has been encrypted using the network encryption key\n    /// @return a ciphertext representation of the input\n    function asEuint8(inEuint8 memory value) internal pure returns (euint8) {\n        return FHE.asEuint8(value.data);\n    }\n    /// @notice Converts a euint8 to an euint16\n    function asEuint16(euint8 value) internal pure returns (euint16) {\n        return euint16.wrap(Impl.cast(Common.EUINT8_TFHE, euint8.unwrap(value), Common.EUINT16_TFHE));\n    }\n    /// @notice Converts a euint8 to an euint32\n    function asEuint32(euint8 value) internal pure returns (euint32) {\n        return euint32.wrap(Impl.cast(Common.EUINT8_TFHE, euint8.unwrap(value), Common.EUINT32_TFHE));\n    }\n    /// @notice Converts a euint8 to an euint64\n    function asEuint64(euint8 value) internal pure returns (euint64) {\n        return euint64.wrap(Impl.cast(Common.EUINT8_TFHE, euint8.unwrap(value), Common.EUINT64_TFHE));\n    }\n    /// @notice Converts a euint8 to an euint128\n    function asEuint128(euint8 value) internal pure returns (euint128) {\n        return euint128.wrap(Impl.cast(Common.EUINT8_TFHE, euint8.unwrap(value), Common.EUINT128_TFHE));\n    }\n    /// @notice Converts a euint8 to an euint256\n    function asEuint256(euint8 value) internal pure returns (euint256) {\n        return euint256.wrap(Impl.cast(Common.EUINT8_TFHE, euint8.unwrap(value), Common.EUINT256_TFHE));\n    }\n    /// @notice Converts a euint8 to an eaddress\n    function asEaddress(euint8 value) internal pure returns (eaddress) {\n        return eaddress.wrap(Impl.cast(Common.EUINT8_TFHE, euint8.unwrap(value), Common.EADDRESS_TFHE));\n    }\n    \n    /// @notice Converts a euint16 to an ebool\n    function asEbool(euint16 value) internal pure returns (ebool) {\n        return ne(value, asEuint16(0));\n    }\n    /// @notice Converts a euint16 to an euint8\n    function asEuint8(euint16 value) internal pure returns (euint8) {\n        return euint8.wrap(Impl.cast(Common.EUINT16_TFHE, euint16.unwrap(value), Common.EUINT8_TFHE));\n    }\n    /// @notice Parses input ciphertexts from the user. Converts from encrypted raw bytes to an euint16\n    /// @dev Also performs validation that the ciphertext is valid and has been encrypted using the network encryption key\n    /// @return a ciphertext representation of the input\n    function asEuint16(inEuint16 memory value) internal pure returns (euint16) {\n        return FHE.asEuint16(value.data);\n    }\n    /// @notice Converts a euint16 to an euint32\n    function asEuint32(euint16 value) internal pure returns (euint32) {\n        return euint32.wrap(Impl.cast(Common.EUINT16_TFHE, euint16.unwrap(value), Common.EUINT32_TFHE));\n    }\n    /// @notice Converts a euint16 to an euint64\n    function asEuint64(euint16 value) internal pure returns (euint64) {\n        return euint64.wrap(Impl.cast(Common.EUINT16_TFHE, euint16.unwrap(value), Common.EUINT64_TFHE));\n    }\n    /// @notice Converts a euint16 to an euint128\n    function asEuint128(euint16 value) internal pure returns (euint128) {\n        return euint128.wrap(Impl.cast(Common.EUINT16_TFHE, euint16.unwrap(value), Common.EUINT128_TFHE));\n    }\n    /// @notice Converts a euint16 to an euint256\n    function asEuint256(euint16 value) internal pure returns (euint256) {\n        return euint256.wrap(Impl.cast(Common.EUINT16_TFHE, euint16.unwrap(value), Common.EUINT256_TFHE));\n    }\n    /// @notice Converts a euint16 to an eaddress\n    function asEaddress(euint16 value) internal pure returns (eaddress) {\n        return eaddress.wrap(Impl.cast(Common.EUINT16_TFHE, euint16.unwrap(value), Common.EADDRESS_TFHE));\n    }\n    \n    /// @notice Converts a euint32 to an ebool\n    function asEbool(euint32 value) internal pure returns (ebool) {\n        return ne(value, asEuint32(0));\n    }\n    /// @notice Converts a euint32 to an euint8\n    function asEuint8(euint32 value) internal pure returns (euint8) {\n        return euint8.wrap(Impl.cast(Common.EUINT32_TFHE, euint32.unwrap(value), Common.EUINT8_TFHE));\n    }\n    /// @notice Converts a euint32 to an euint16\n    function asEuint16(euint32 value) internal pure returns (euint16) {\n        return euint16.wrap(Impl.cast(Common.EUINT32_TFHE, euint32.unwrap(value), Common.EUINT16_TFHE));\n    }\n    /// @notice Parses input ciphertexts from the user. Converts from encrypted raw bytes to an euint32\n    /// @dev Also performs validation that the ciphertext is valid and has been encrypted using the network encryption key\n    /// @return a ciphertext representation of the input\n    function asEuint32(inEuint32 memory value) internal pure returns (euint32) {\n        return FHE.asEuint32(value.data);\n    }\n    /// @notice Converts a euint32 to an euint64\n    function asEuint64(euint32 value) internal pure returns (euint64) {\n        return euint64.wrap(Impl.cast(Common.EUINT32_TFHE, euint32.unwrap(value), Common.EUINT64_TFHE));\n    }\n    /// @notice Converts a euint32 to an euint128\n    function asEuint128(euint32 value) internal pure returns (euint128) {\n        return euint128.wrap(Impl.cast(Common.EUINT32_TFHE, euint32.unwrap(value), Common.EUINT128_TFHE));\n    }\n    /// @notice Converts a euint32 to an euint256\n    function asEuint256(euint32 value) internal pure returns (euint256) {\n        return euint256.wrap(Impl.cast(Common.EUINT32_TFHE, euint32.unwrap(value), Common.EUINT256_TFHE));\n    }\n    /// @notice Converts a euint32 to an eaddress\n    function asEaddress(euint32 value) internal pure returns (eaddress) {\n        return eaddress.wrap(Impl.cast(Common.EUINT32_TFHE, euint32.unwrap(value), Common.EADDRESS_TFHE));\n    }\n    \n    /// @notice Converts a euint64 to an ebool\n    function asEbool(euint64 value) internal pure returns (ebool) {\n        return ne(value, asEuint64(0));\n    }\n    /// @notice Converts a euint64 to an euint8\n    function asEuint8(euint64 value) internal pure returns (euint8) {\n        return euint8.wrap(Impl.cast(Common.EUINT64_TFHE, euint64.unwrap(value), Common.EUINT8_TFHE));\n    }\n    /// @notice Converts a euint64 to an euint16\n    function asEuint16(euint64 value) internal pure returns (euint16) {\n        return euint16.wrap(Impl.cast(Common.EUINT64_TFHE, euint64.unwrap(value), Common.EUINT16_TFHE));\n    }\n    /// @notice Converts a euint64 to an euint32\n    function asEuint32(euint64 value) internal pure returns (euint32) {\n        return euint32.wrap(Impl.cast(Common.EUINT64_TFHE, euint64.unwrap(value), Common.EUINT32_TFHE));\n    }\n    /// @notice Parses input ciphertexts from the user. Converts from encrypted raw bytes to an euint64\n    /// @dev Also performs validation that the ciphertext is valid and has been encrypted using the network encryption key\n    /// @return a ciphertext representation of the input\n    function asEuint64(inEuint64 memory value) internal pure returns (euint64) {\n        return FHE.asEuint64(value.data);\n    }\n    /// @notice Converts a euint64 to an euint128\n    function asEuint128(euint64 value) internal pure returns (euint128) {\n        return euint128.wrap(Impl.cast(Common.EUINT64_TFHE, euint64.unwrap(value), Common.EUINT128_TFHE));\n    }\n    /// @notice Converts a euint64 to an euint256\n    function asEuint256(euint64 value) internal pure returns (euint256) {\n        return euint256.wrap(Impl.cast(Common.EUINT64_TFHE, euint64.unwrap(value), Common.EUINT256_TFHE));\n    }\n    /// @notice Converts a euint64 to an eaddress\n    function asEaddress(euint64 value) internal pure returns (eaddress) {\n        return eaddress.wrap(Impl.cast(Common.EUINT64_TFHE, euint64.unwrap(value), Common.EADDRESS_TFHE));\n    }\n    \n    /// @notice Converts a euint128 to an ebool\n    function asEbool(euint128 value) internal pure returns (ebool) {\n        return ne(value, asEuint128(0));\n    }\n    /// @notice Converts a euint128 to an euint8\n    function asEuint8(euint128 value) internal pure returns (euint8) {\n        return euint8.wrap(Impl.cast(Common.EUINT128_TFHE, euint128.unwrap(value), Common.EUINT8_TFHE));\n    }\n    /// @notice Converts a euint128 to an euint16\n    function asEuint16(euint128 value) internal pure returns (euint16) {\n        return euint16.wrap(Impl.cast(Common.EUINT128_TFHE, euint128.unwrap(value), Common.EUINT16_TFHE));\n    }\n    /// @notice Converts a euint128 to an euint32\n    function asEuint32(euint128 value) internal pure returns (euint32) {\n        return euint32.wrap(Impl.cast(Common.EUINT128_TFHE, euint128.unwrap(value), Common.EUINT32_TFHE));\n    }\n    /// @notice Converts a euint128 to an euint64\n    function asEuint64(euint128 value) internal pure returns (euint64) {\n        return euint64.wrap(Impl.cast(Common.EUINT128_TFHE, euint128.unwrap(value), Common.EUINT64_TFHE));\n    }\n    /// @notice Parses input ciphertexts from the user. Converts from encrypted raw bytes to an euint128\n    /// @dev Also performs validation that the ciphertext is valid and has been encrypted using the network encryption key\n    /// @return a ciphertext representation of the input\n    function asEuint128(inEuint128 memory value) internal pure returns (euint128) {\n        return FHE.asEuint128(value.data);\n    }\n    /// @notice Converts a euint128 to an euint256\n    function asEuint256(euint128 value) internal pure returns (euint256) {\n        return euint256.wrap(Impl.cast(Common.EUINT128_TFHE, euint128.unwrap(value), Common.EUINT256_TFHE));\n    }\n    /// @notice Converts a euint128 to an eaddress\n    function asEaddress(euint128 value) internal pure returns (eaddress) {\n        return eaddress.wrap(Impl.cast(Common.EUINT128_TFHE, euint128.unwrap(value), Common.EADDRESS_TFHE));\n    }\n    \n    /// @notice Converts a euint256 to an ebool\n    function asEbool(euint256 value) internal pure returns (ebool) {\n        return ne(value, asEuint256(0));\n    }\n    /// @notice Converts a euint256 to an euint8\n    function asEuint8(euint256 value) internal pure returns (euint8) {\n        return euint8.wrap(Impl.cast(Common.EUINT256_TFHE, euint256.unwrap(value), Common.EUINT8_TFHE));\n    }\n    /// @notice Converts a euint256 to an euint16\n    function asEuint16(euint256 value) internal pure returns (euint16) {\n        return euint16.wrap(Impl.cast(Common.EUINT256_TFHE, euint256.unwrap(value), Common.EUINT16_TFHE));\n    }\n    /// @notice Converts a euint256 to an euint32\n    function asEuint32(euint256 value) internal pure returns (euint32) {\n        return euint32.wrap(Impl.cast(Common.EUINT256_TFHE, euint256.unwrap(value), Common.EUINT32_TFHE));\n    }\n    /// @notice Converts a euint256 to an euint64\n    function asEuint64(euint256 value) internal pure returns (euint64) {\n        return euint64.wrap(Impl.cast(Common.EUINT256_TFHE, euint256.unwrap(value), Common.EUINT64_TFHE));\n    }\n    /// @notice Converts a euint256 to an euint128\n    function asEuint128(euint256 value) internal pure returns (euint128) {\n        return euint128.wrap(Impl.cast(Common.EUINT256_TFHE, euint256.unwrap(value), Common.EUINT128_TFHE));\n    }\n    /// @notice Parses input ciphertexts from the user. Converts from encrypted raw bytes to an euint256\n    /// @dev Also performs validation that the ciphertext is valid and has been encrypted using the network encryption key\n    /// @return a ciphertext representation of the input\n    function asEuint256(inEuint256 memory value) internal pure returns (euint256) {\n        return FHE.asEuint256(value.data);\n    }\n    /// @notice Converts a euint256 to an eaddress\n    function asEaddress(euint256 value) internal pure returns (eaddress) {\n        return eaddress.wrap(Impl.cast(Common.EUINT256_TFHE, euint256.unwrap(value), Common.EADDRESS_TFHE));\n    }\n    \n    /// @notice Converts a eaddress to an ebool\n    function asEbool(eaddress value) internal pure returns (ebool) {\n        return ne(value, asEaddress(0));\n    }\n    /// @notice Converts a eaddress to an euint8\n    function asEuint8(eaddress value) internal pure returns (euint8) {\n        return euint8.wrap(Impl.cast(Common.EADDRESS_TFHE, eaddress.unwrap(value), Common.EUINT8_TFHE));\n    }\n    /// @notice Converts a eaddress to an euint16\n    function asEuint16(eaddress value) internal pure returns (euint16) {\n        return euint16.wrap(Impl.cast(Common.EADDRESS_TFHE, eaddress.unwrap(value), Common.EUINT16_TFHE));\n    }\n    /// @notice Converts a eaddress to an euint32\n    function asEuint32(eaddress value) internal pure returns (euint32) {\n        return euint32.wrap(Impl.cast(Common.EADDRESS_TFHE, eaddress.unwrap(value), Common.EUINT32_TFHE));\n    }\n    /// @notice Converts a eaddress to an euint64\n    function asEuint64(eaddress value) internal pure returns (euint64) {\n        return euint64.wrap(Impl.cast(Common.EADDRESS_TFHE, eaddress.unwrap(value), Common.EUINT64_TFHE));\n    }\n    /// @notice Converts a eaddress to an euint128\n    function asEuint128(eaddress value) internal pure returns (euint128) {\n        return euint128.wrap(Impl.cast(Common.EADDRESS_TFHE, eaddress.unwrap(value), Common.EUINT128_TFHE));\n    }\n    /// @notice Converts a eaddress to an euint256\n    function asEuint256(eaddress value) internal pure returns (euint256) {\n        return euint256.wrap(Impl.cast(Common.EADDRESS_TFHE, eaddress.unwrap(value), Common.EUINT256_TFHE));\n    }\n    /// @notice Parses input ciphertexts from the user. Converts from encrypted raw bytes to an eaddress\n    /// @dev Also performs validation that the ciphertext is valid and has been encrypted using the network encryption key\n    /// @return a ciphertext representation of the input\n    function asEaddress(inEaddress memory value) internal pure returns (eaddress) {\n        return FHE.asEaddress(value.data);\n    }\n    /// @notice Converts a uint256 to an ebool\n    function asEbool(uint256 value) internal pure returns (ebool) {\n        return ebool.wrap(Impl.trivialEncrypt(value, Common.EBOOL_TFHE));\n    }\n    /// @notice Converts a uint256 to an euint8\n    function asEuint8(uint256 value) internal pure returns (euint8) {\n        return euint8.wrap(Impl.trivialEncrypt(value, Common.EUINT8_TFHE));\n    }\n    /// @notice Converts a uint256 to an euint16\n    function asEuint16(uint256 value) internal pure returns (euint16) {\n        return euint16.wrap(Impl.trivialEncrypt(value, Common.EUINT16_TFHE));\n    }\n    /// @notice Converts a uint256 to an euint32\n    function asEuint32(uint256 value) internal pure returns (euint32) {\n        return euint32.wrap(Impl.trivialEncrypt(value, Common.EUINT32_TFHE));\n    }\n    /// @notice Converts a uint256 to an euint64\n    function asEuint64(uint256 value) internal pure returns (euint64) {\n        return euint64.wrap(Impl.trivialEncrypt(value, Common.EUINT64_TFHE));\n    }\n    /// @notice Converts a uint256 to an euint128\n    function asEuint128(uint256 value) internal pure returns (euint128) {\n        return euint128.wrap(Impl.trivialEncrypt(value, Common.EUINT128_TFHE));\n    }\n    /// @notice Converts a uint256 to an euint256\n    function asEuint256(uint256 value) internal pure returns (euint256) {\n        return euint256.wrap(Impl.trivialEncrypt(value, Common.EUINT256_TFHE));\n    }\n    /// @notice Converts a uint256 to an eaddress\n    function asEaddress(uint256 value) internal pure returns (eaddress) {\n        return eaddress.wrap(Impl.trivialEncrypt(value, Common.EADDRESS_TFHE));\n    }\n    /// @notice Parses input ciphertexts from the user. Converts from encrypted raw bytes to an ebool\n    /// @dev Also performs validation that the ciphertext is valid and has been encrypted using the network encryption key\n    /// @return a ciphertext representation of the input\n    function asEbool(bytes memory value) internal pure returns (ebool) {\n        return ebool.wrap(Impl.verify(value, Common.EBOOL_TFHE));\n    }\n    /// @notice Parses input ciphertexts from the user. Converts from encrypted raw bytes to an euint8\n    /// @dev Also performs validation that the ciphertext is valid and has been encrypted using the network encryption key\n    /// @return a ciphertext representation of the input\n    function asEuint8(bytes memory value) internal pure returns (euint8) {\n        return euint8.wrap(Impl.verify(value, Common.EUINT8_TFHE));\n    }\n    /// @notice Parses input ciphertexts from the user. Converts from encrypted raw bytes to an euint16\n    /// @dev Also performs validation that the ciphertext is valid and has been encrypted using the network encryption key\n    /// @return a ciphertext representation of the input\n    function asEuint16(bytes memory value) internal pure returns (euint16) {\n        return euint16.wrap(Impl.verify(value, Common.EUINT16_TFHE));\n    }\n    /// @notice Parses input ciphertexts from the user. Converts from encrypted raw bytes to an euint32\n    /// @dev Also performs validation that the ciphertext is valid and has been encrypted using the network encryption key\n    /// @return a ciphertext representation of the input\n    function asEuint32(bytes memory value) internal pure returns (euint32) {\n        return euint32.wrap(Impl.verify(value, Common.EUINT32_TFHE));\n    }\n    /// @notice Parses input ciphertexts from the user. Converts from encrypted raw bytes to an euint64\n    /// @dev Also performs validation that the ciphertext is valid and has been encrypted using the network encryption key\n    /// @return a ciphertext representation of the input\n    function asEuint64(bytes memory value) internal pure returns (euint64) {\n        return euint64.wrap(Impl.verify(value, Common.EUINT64_TFHE));\n    }\n    /// @notice Parses input ciphertexts from the user. Converts from encrypted raw bytes to an euint128\n    /// @dev Also performs validation that the ciphertext is valid and has been encrypted using the network encryption key\n    /// @return a ciphertext representation of the input\n    function asEuint128(bytes memory value) internal pure returns (euint128) {\n        return euint128.wrap(Impl.verify(value, Common.EUINT128_TFHE));\n    }\n    /// @notice Parses input ciphertexts from the user. Converts from encrypted raw bytes to an euint256\n    /// @dev Also performs validation that the ciphertext is valid and has been encrypted using the network encryption key\n    /// @return a ciphertext representation of the input\n    function asEuint256(bytes memory value) internal pure returns (euint256) {\n        return euint256.wrap(Impl.verify(value, Common.EUINT256_TFHE));\n    }\n    /// @notice Parses input ciphertexts from the user. Converts from encrypted raw bytes to an eaddress\n    /// @dev Also performs validation that the ciphertext is valid and has been encrypted using the network encryption key\n    /// @return a ciphertext representation of the input\n    function asEaddress(bytes memory value) internal pure returns (eaddress) {\n        return eaddress.wrap(Impl.verify(value, Common.EADDRESS_TFHE));\n    }\n    /// @notice Converts a address to an eaddress\n    /// Allows for a better user experience when working with eaddresses\n    function asEaddress(address value) internal pure returns (eaddress) {\n        return eaddress.wrap(Impl.trivialEncrypt(uint256(uint160(value)), Common.EADDRESS_TFHE));\n    }\n    /// @notice Converts a plaintext boolean value to a ciphertext ebool\n    /// @dev Privacy: The input value is public, therefore the ciphertext should be considered public and should be used\n    ///only for mathematical operations, not to represent data that should be private\n    /// @return A ciphertext representation of the input \n    function asEbool(bool value) internal pure returns (ebool) {\n        uint256 sVal = 0;\n        if (value) {\n            sVal = 1;\n        }\n\n        return asEbool(sVal);\n    }\n}\n\n// ********** OPERATOR OVERLOADING ************* //\n\nusing {operatorAddEuint8 as +} for euint8 global;\n/// @notice Performs the add operation\nfunction operatorAddEuint8(euint8 lhs, euint8 rhs) pure returns (euint8) {\n    return FHE.add(lhs, rhs);\n}\n\nusing {operatorAddEuint16 as +} for euint16 global;\n/// @notice Performs the add operation\nfunction operatorAddEuint16(euint16 lhs, euint16 rhs) pure returns (euint16) {\n    return FHE.add(lhs, rhs);\n}\n\nusing {operatorAddEuint32 as +} for euint32 global;\n/// @notice Performs the add operation\nfunction operatorAddEuint32(euint32 lhs, euint32 rhs) pure returns (euint32) {\n    return FHE.add(lhs, rhs);\n}\n\nusing {operatorAddEuint64 as +} for euint64 global;\n/// @notice Performs the add operation\nfunction operatorAddEuint64(euint64 lhs, euint64 rhs) pure returns (euint64) {\n    return FHE.add(lhs, rhs);\n}\n\nusing {operatorAddEuint128 as +} for euint128 global;\n/// @notice Performs the add operation\nfunction operatorAddEuint128(euint128 lhs, euint128 rhs) pure returns (euint128) {\n    return FHE.add(lhs, rhs);\n}\n\nusing {operatorSubEuint8 as -} for euint8 global;\n/// @notice Performs the sub operation\nfunction operatorSubEuint8(euint8 lhs, euint8 rhs) pure returns (euint8) {\n    return FHE.sub(lhs, rhs);\n}\n\nusing {operatorSubEuint16 as -} for euint16 global;\n/// @notice Performs the sub operation\nfunction operatorSubEuint16(euint16 lhs, euint16 rhs) pure returns (euint16) {\n    return FHE.sub(lhs, rhs);\n}\n\nusing {operatorSubEuint32 as -} for euint32 global;\n/// @notice Performs the sub operation\nfunction operatorSubEuint32(euint32 lhs, euint32 rhs) pure returns (euint32) {\n    return FHE.sub(lhs, rhs);\n}\n\nusing {operatorSubEuint64 as -} for euint64 global;\n/// @notice Performs the sub operation\nfunction operatorSubEuint64(euint64 lhs, euint64 rhs) pure returns (euint64) {\n    return FHE.sub(lhs, rhs);\n}\n\nusing {operatorSubEuint128 as -} for euint128 global;\n/// @notice Performs the sub operation\nfunction operatorSubEuint128(euint128 lhs, euint128 rhs) pure returns (euint128) {\n    return FHE.sub(lhs, rhs);\n}\n\nusing {operatorMulEuint8 as *} for euint8 global;\n/// @notice Performs the mul operation\nfunction operatorMulEuint8(euint8 lhs, euint8 rhs) pure returns (euint8) {\n    return FHE.mul(lhs, rhs);\n}\n\nusing {operatorMulEuint16 as *} for euint16 global;\n/// @notice Performs the mul operation\nfunction operatorMulEuint16(euint16 lhs, euint16 rhs) pure returns (euint16) {\n    return FHE.mul(lhs, rhs);\n}\n\nusing {operatorMulEuint32 as *} for euint32 global;\n/// @notice Performs the mul operation\nfunction operatorMulEuint32(euint32 lhs, euint32 rhs) pure returns (euint32) {\n    return FHE.mul(lhs, rhs);\n}\n\nusing {operatorMulEuint64 as *} for euint64 global;\n/// @notice Performs the mul operation\nfunction operatorMulEuint64(euint64 lhs, euint64 rhs) pure returns (euint64) {\n    return FHE.mul(lhs, rhs);\n}\n\nusing {operatorDivEuint8 as /} for euint8 global;\n/// @notice Performs the div operation\nfunction operatorDivEuint8(euint8 lhs, euint8 rhs) pure returns (euint8) {\n    return FHE.div(lhs, rhs);\n}\n\nusing {operatorDivEuint16 as /} for euint16 global;\n/// @notice Performs the div operation\nfunction operatorDivEuint16(euint16 lhs, euint16 rhs) pure returns (euint16) {\n    return FHE.div(lhs, rhs);\n}\n\nusing {operatorDivEuint32 as /} for euint32 global;\n/// @notice Performs the div operation\nfunction operatorDivEuint32(euint32 lhs, euint32 rhs) pure returns (euint32) {\n    return FHE.div(lhs, rhs);\n}\n\nusing {operatorOrEbool as |} for ebool global;\n/// @notice Performs the or operation\nfunction operatorOrEbool(ebool lhs, ebool rhs) pure returns (ebool) {\n    return FHE.or(lhs, rhs);\n}\n\nusing {operatorOrEuint8 as |} for euint8 global;\n/// @notice Performs the or operation\nfunction operatorOrEuint8(euint8 lhs, euint8 rhs) pure returns (euint8) {\n    return FHE.or(lhs, rhs);\n}\n\nusing {operatorOrEuint16 as |} for euint16 global;\n/// @notice Performs the or operation\nfunction operatorOrEuint16(euint16 lhs, euint16 rhs) pure returns (euint16) {\n    return FHE.or(lhs, rhs);\n}\n\nusing {operatorOrEuint32 as |} for euint32 global;\n/// @notice Performs the or operation\nfunction operatorOrEuint32(euint32 lhs, euint32 rhs) pure returns (euint32) {\n    return FHE.or(lhs, rhs);\n}\n\nusing {operatorOrEuint64 as |} for euint64 global;\n/// @notice Performs the or operation\nfunction operatorOrEuint64(euint64 lhs, euint64 rhs) pure returns (euint64) {\n    return FHE.or(lhs, rhs);\n}\n\nusing {operatorOrEuint128 as |} for euint128 global;\n/// @notice Performs the or operation\nfunction operatorOrEuint128(euint128 lhs, euint128 rhs) pure returns (euint128) {\n    return FHE.or(lhs, rhs);\n}\n\nusing {operatorAndEbool as &} for ebool global;\n/// @notice Performs the and operation\nfunction operatorAndEbool(ebool lhs, ebool rhs) pure returns (ebool) {\n    return FHE.and(lhs, rhs);\n}\n\nusing {operatorAndEuint8 as &} for euint8 global;\n/// @notice Performs the and operation\nfunction operatorAndEuint8(euint8 lhs, euint8 rhs) pure returns (euint8) {\n    return FHE.and(lhs, rhs);\n}\n\nusing {operatorAndEuint16 as &} for euint16 global;\n/// @notice Performs the and operation\nfunction operatorAndEuint16(euint16 lhs, euint16 rhs) pure returns (euint16) {\n    return FHE.and(lhs, rhs);\n}\n\nusing {operatorAndEuint32 as &} for euint32 global;\n/// @notice Performs the and operation\nfunction operatorAndEuint32(euint32 lhs, euint32 rhs) pure returns (euint32) {\n    return FHE.and(lhs, rhs);\n}\n\nusing {operatorAndEuint64 as &} for euint64 global;\n/// @notice Performs the and operation\nfunction operatorAndEuint64(euint64 lhs, euint64 rhs) pure returns (euint64) {\n    return FHE.and(lhs, rhs);\n}\n\nusing {operatorAndEuint128 as &} for euint128 global;\n/// @notice Performs the and operation\nfunction operatorAndEuint128(euint128 lhs, euint128 rhs) pure returns (euint128) {\n    return FHE.and(lhs, rhs);\n}\n\nusing {operatorXorEbool as ^} for ebool global;\n/// @notice Performs the xor operation\nfunction operatorXorEbool(ebool lhs, ebool rhs) pure returns (ebool) {\n    return FHE.xor(lhs, rhs);\n}\n\nusing {operatorXorEuint8 as ^} for euint8 global;\n/// @notice Performs the xor operation\nfunction operatorXorEuint8(euint8 lhs, euint8 rhs) pure returns (euint8) {\n    return FHE.xor(lhs, rhs);\n}\n\nusing {operatorXorEuint16 as ^} for euint16 global;\n/// @notice Performs the xor operation\nfunction operatorXorEuint16(euint16 lhs, euint16 rhs) pure returns (euint16) {\n    return FHE.xor(lhs, rhs);\n}\n\nusing {operatorXorEuint32 as ^} for euint32 global;\n/// @notice Performs the xor operation\nfunction operatorXorEuint32(euint32 lhs, euint32 rhs) pure returns (euint32) {\n    return FHE.xor(lhs, rhs);\n}\n\nusing {operatorXorEuint64 as ^} for euint64 global;\n/// @notice Performs the xor operation\nfunction operatorXorEuint64(euint64 lhs, euint64 rhs) pure returns (euint64) {\n    return FHE.xor(lhs, rhs);\n}\n\nusing {operatorXorEuint128 as ^} for euint128 global;\n/// @notice Performs the xor operation\nfunction operatorXorEuint128(euint128 lhs, euint128 rhs) pure returns (euint128) {\n    return FHE.xor(lhs, rhs);\n}\n\nusing {operatorRemEuint8 as %} for euint8 global;\n/// @notice Performs the rem operation\nfunction operatorRemEuint8(euint8 lhs, euint8 rhs) pure returns (euint8) {\n    return FHE.rem(lhs, rhs);\n}\n\nusing {operatorRemEuint16 as %} for euint16 global;\n/// @notice Performs the rem operation\nfunction operatorRemEuint16(euint16 lhs, euint16 rhs) pure returns (euint16) {\n    return FHE.rem(lhs, rhs);\n}\n\nusing {operatorRemEuint32 as %} for euint32 global;\n/// @notice Performs the rem operation\nfunction operatorRemEuint32(euint32 lhs, euint32 rhs) pure returns (euint32) {\n    return FHE.rem(lhs, rhs);\n}\n\n// ********** BINDING DEFS ************* //\n\nusing BindingsEbool for ebool global;\nlibrary BindingsEbool {\n    \n    /// @notice Performs the eq operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type ebool\n    /// @return the result of the eq\n    function eq(ebool lhs, ebool rhs) internal pure returns (ebool) {\n        return FHE.eq(lhs, rhs);\n    }\n    \n    /// @notice Performs the ne operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type ebool\n    /// @return the result of the ne\n    function ne(ebool lhs, ebool rhs) internal pure returns (ebool) {\n        return FHE.ne(lhs, rhs);\n    }\n    \n    /// @notice Performs the and operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type ebool\n    /// @return the result of the and\n    function and(ebool lhs, ebool rhs) internal pure returns (ebool) {\n        return FHE.and(lhs, rhs);\n    }\n    \n    /// @notice Performs the or operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type ebool\n    /// @return the result of the or\n    function or(ebool lhs, ebool rhs) internal pure returns (ebool) {\n        return FHE.or(lhs, rhs);\n    }\n    \n    /// @notice Performs the xor operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type ebool\n    /// @return the result of the xor\n    function xor(ebool lhs, ebool rhs) internal pure returns (ebool) {\n        return FHE.xor(lhs, rhs);\n    }\n    function toU8(ebool value) internal pure returns (euint8) {\n        return FHE.asEuint8(value);\n    }\n    function toU16(ebool value) internal pure returns (euint16) {\n        return FHE.asEuint16(value);\n    }\n    function toU32(ebool value) internal pure returns (euint32) {\n        return FHE.asEuint32(value);\n    }\n    function toU64(ebool value) internal pure returns (euint64) {\n        return FHE.asEuint64(value);\n    }\n    function toU128(ebool value) internal pure returns (euint128) {\n        return FHE.asEuint128(value);\n    }\n    function toU256(ebool value) internal pure returns (euint256) {\n        return FHE.asEuint256(value);\n    }\n    function toEaddress(ebool value) internal pure returns (eaddress) {\n        return FHE.asEaddress(value);\n    }\n    function seal(ebool value, bytes32 publicKey) internal pure returns (string memory) {\n        return FHE.sealoutput(value, publicKey);\n    }\n    function decrypt(ebool value) internal pure returns (bool) {\n        return FHE.decrypt(value);\n    }\n}\n\nusing BindingsEuint8 for euint8 global;\nlibrary BindingsEuint8 {\n    \n    /// @notice Performs the add operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint8\n    /// @return the result of the add\n    function add(euint8 lhs, euint8 rhs) internal pure returns (euint8) {\n        return FHE.add(lhs, rhs);\n    }\n    \n    /// @notice Performs the mul operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint8\n    /// @return the result of the mul\n    function mul(euint8 lhs, euint8 rhs) internal pure returns (euint8) {\n        return FHE.mul(lhs, rhs);\n    }\n    \n    /// @notice Performs the div operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint8\n    /// @return the result of the div\n    function div(euint8 lhs, euint8 rhs) internal pure returns (euint8) {\n        return FHE.div(lhs, rhs);\n    }\n    \n    /// @notice Performs the sub operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint8\n    /// @return the result of the sub\n    function sub(euint8 lhs, euint8 rhs) internal pure returns (euint8) {\n        return FHE.sub(lhs, rhs);\n    }\n    \n    /// @notice Performs the eq operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint8\n    /// @return the result of the eq\n    function eq(euint8 lhs, euint8 rhs) internal pure returns (ebool) {\n        return FHE.eq(lhs, rhs);\n    }\n    \n    /// @notice Performs the ne operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint8\n    /// @return the result of the ne\n    function ne(euint8 lhs, euint8 rhs) internal pure returns (ebool) {\n        return FHE.ne(lhs, rhs);\n    }\n    \n    /// @notice Performs the and operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint8\n    /// @return the result of the and\n    function and(euint8 lhs, euint8 rhs) internal pure returns (euint8) {\n        return FHE.and(lhs, rhs);\n    }\n    \n    /// @notice Performs the or operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint8\n    /// @return the result of the or\n    function or(euint8 lhs, euint8 rhs) internal pure returns (euint8) {\n        return FHE.or(lhs, rhs);\n    }\n    \n    /// @notice Performs the xor operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint8\n    /// @return the result of the xor\n    function xor(euint8 lhs, euint8 rhs) internal pure returns (euint8) {\n        return FHE.xor(lhs, rhs);\n    }\n    \n    /// @notice Performs the gt operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint8\n    /// @return the result of the gt\n    function gt(euint8 lhs, euint8 rhs) internal pure returns (ebool) {\n        return FHE.gt(lhs, rhs);\n    }\n    \n    /// @notice Performs the gte operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint8\n    /// @return the result of the gte\n    function gte(euint8 lhs, euint8 rhs) internal pure returns (ebool) {\n        return FHE.gte(lhs, rhs);\n    }\n    \n    /// @notice Performs the lt operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint8\n    /// @return the result of the lt\n    function lt(euint8 lhs, euint8 rhs) internal pure returns (ebool) {\n        return FHE.lt(lhs, rhs);\n    }\n    \n    /// @notice Performs the lte operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint8\n    /// @return the result of the lte\n    function lte(euint8 lhs, euint8 rhs) internal pure returns (ebool) {\n        return FHE.lte(lhs, rhs);\n    }\n    \n    /// @notice Performs the rem operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint8\n    /// @return the result of the rem\n    function rem(euint8 lhs, euint8 rhs) internal pure returns (euint8) {\n        return FHE.rem(lhs, rhs);\n    }\n    \n    /// @notice Performs the max operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint8\n    /// @return the result of the max\n    function max(euint8 lhs, euint8 rhs) internal pure returns (euint8) {\n        return FHE.max(lhs, rhs);\n    }\n    \n    /// @notice Performs the min operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint8\n    /// @return the result of the min\n    function min(euint8 lhs, euint8 rhs) internal pure returns (euint8) {\n        return FHE.min(lhs, rhs);\n    }\n    \n    /// @notice Performs the shl operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint8\n    /// @return the result of the shl\n    function shl(euint8 lhs, euint8 rhs) internal pure returns (euint8) {\n        return FHE.shl(lhs, rhs);\n    }\n    \n    /// @notice Performs the shr operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint8\n    /// @return the result of the shr\n    function shr(euint8 lhs, euint8 rhs) internal pure returns (euint8) {\n        return FHE.shr(lhs, rhs);\n    }\n    function toBool(euint8 value) internal pure returns (ebool) {\n        return FHE.asEbool(value);\n    }\n    function toU16(euint8 value) internal pure returns (euint16) {\n        return FHE.asEuint16(value);\n    }\n    function toU32(euint8 value) internal pure returns (euint32) {\n        return FHE.asEuint32(value);\n    }\n    function toU64(euint8 value) internal pure returns (euint64) {\n        return FHE.asEuint64(value);\n    }\n    function toU128(euint8 value) internal pure returns (euint128) {\n        return FHE.asEuint128(value);\n    }\n    function toU256(euint8 value) internal pure returns (euint256) {\n        return FHE.asEuint256(value);\n    }\n    function toEaddress(euint8 value) internal pure returns (eaddress) {\n        return FHE.asEaddress(value);\n    }\n    function seal(euint8 value, bytes32 publicKey) internal pure returns (string memory) {\n        return FHE.sealoutput(value, publicKey);\n    }\n    function decrypt(euint8 value) internal pure returns (uint8) {\n        return FHE.decrypt(value);\n    }\n}\n\nusing BindingsEuint16 for euint16 global;\nlibrary BindingsEuint16 {\n    \n    /// @notice Performs the add operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint16\n    /// @return the result of the add\n    function add(euint16 lhs, euint16 rhs) internal pure returns (euint16) {\n        return FHE.add(lhs, rhs);\n    }\n    \n    /// @notice Performs the mul operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint16\n    /// @return the result of the mul\n    function mul(euint16 lhs, euint16 rhs) internal pure returns (euint16) {\n        return FHE.mul(lhs, rhs);\n    }\n    \n    /// @notice Performs the div operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint16\n    /// @return the result of the div\n    function div(euint16 lhs, euint16 rhs) internal pure returns (euint16) {\n        return FHE.div(lhs, rhs);\n    }\n    \n    /// @notice Performs the sub operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint16\n    /// @return the result of the sub\n    function sub(euint16 lhs, euint16 rhs) internal pure returns (euint16) {\n        return FHE.sub(lhs, rhs);\n    }\n    \n    /// @notice Performs the eq operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint16\n    /// @return the result of the eq\n    function eq(euint16 lhs, euint16 rhs) internal pure returns (ebool) {\n        return FHE.eq(lhs, rhs);\n    }\n    \n    /// @notice Performs the ne operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint16\n    /// @return the result of the ne\n    function ne(euint16 lhs, euint16 rhs) internal pure returns (ebool) {\n        return FHE.ne(lhs, rhs);\n    }\n    \n    /// @notice Performs the and operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint16\n    /// @return the result of the and\n    function and(euint16 lhs, euint16 rhs) internal pure returns (euint16) {\n        return FHE.and(lhs, rhs);\n    }\n    \n    /// @notice Performs the or operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint16\n    /// @return the result of the or\n    function or(euint16 lhs, euint16 rhs) internal pure returns (euint16) {\n        return FHE.or(lhs, rhs);\n    }\n    \n    /// @notice Performs the xor operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint16\n    /// @return the result of the xor\n    function xor(euint16 lhs, euint16 rhs) internal pure returns (euint16) {\n        return FHE.xor(lhs, rhs);\n    }\n    \n    /// @notice Performs the gt operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint16\n    /// @return the result of the gt\n    function gt(euint16 lhs, euint16 rhs) internal pure returns (ebool) {\n        return FHE.gt(lhs, rhs);\n    }\n    \n    /// @notice Performs the gte operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint16\n    /// @return the result of the gte\n    function gte(euint16 lhs, euint16 rhs) internal pure returns (ebool) {\n        return FHE.gte(lhs, rhs);\n    }\n    \n    /// @notice Performs the lt operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint16\n    /// @return the result of the lt\n    function lt(euint16 lhs, euint16 rhs) internal pure returns (ebool) {\n        return FHE.lt(lhs, rhs);\n    }\n    \n    /// @notice Performs the lte operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint16\n    /// @return the result of the lte\n    function lte(euint16 lhs, euint16 rhs) internal pure returns (ebool) {\n        return FHE.lte(lhs, rhs);\n    }\n    \n    /// @notice Performs the rem operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint16\n    /// @return the result of the rem\n    function rem(euint16 lhs, euint16 rhs) internal pure returns (euint16) {\n        return FHE.rem(lhs, rhs);\n    }\n    \n    /// @notice Performs the max operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint16\n    /// @return the result of the max\n    function max(euint16 lhs, euint16 rhs) internal pure returns (euint16) {\n        return FHE.max(lhs, rhs);\n    }\n    \n    /// @notice Performs the min operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint16\n    /// @return the result of the min\n    function min(euint16 lhs, euint16 rhs) internal pure returns (euint16) {\n        return FHE.min(lhs, rhs);\n    }\n    \n    /// @notice Performs the shl operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint16\n    /// @return the result of the shl\n    function shl(euint16 lhs, euint16 rhs) internal pure returns (euint16) {\n        return FHE.shl(lhs, rhs);\n    }\n    \n    /// @notice Performs the shr operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint16\n    /// @return the result of the shr\n    function shr(euint16 lhs, euint16 rhs) internal pure returns (euint16) {\n        return FHE.shr(lhs, rhs);\n    }\n    function toBool(euint16 value) internal pure returns (ebool) {\n        return FHE.asEbool(value);\n    }\n    function toU8(euint16 value) internal pure returns (euint8) {\n        return FHE.asEuint8(value);\n    }\n    function toU32(euint16 value) internal pure returns (euint32) {\n        return FHE.asEuint32(value);\n    }\n    function toU64(euint16 value) internal pure returns (euint64) {\n        return FHE.asEuint64(value);\n    }\n    function toU128(euint16 value) internal pure returns (euint128) {\n        return FHE.asEuint128(value);\n    }\n    function toU256(euint16 value) internal pure returns (euint256) {\n        return FHE.asEuint256(value);\n    }\n    function toEaddress(euint16 value) internal pure returns (eaddress) {\n        return FHE.asEaddress(value);\n    }\n    function seal(euint16 value, bytes32 publicKey) internal pure returns (string memory) {\n        return FHE.sealoutput(value, publicKey);\n    }\n    function decrypt(euint16 value) internal pure returns (uint16) {\n        return FHE.decrypt(value);\n    }\n}\n\nusing BindingsEuint32 for euint32 global;\nlibrary BindingsEuint32 {\n    \n    /// @notice Performs the add operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint32\n    /// @return the result of the add\n    function add(euint32 lhs, euint32 rhs) internal pure returns (euint32) {\n        return FHE.add(lhs, rhs);\n    }\n    \n    /// @notice Performs the mul operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint32\n    /// @return the result of the mul\n    function mul(euint32 lhs, euint32 rhs) internal pure returns (euint32) {\n        return FHE.mul(lhs, rhs);\n    }\n    \n    /// @notice Performs the div operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint32\n    /// @return the result of the div\n    function div(euint32 lhs, euint32 rhs) internal pure returns (euint32) {\n        return FHE.div(lhs, rhs);\n    }\n    \n    /// @notice Performs the sub operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint32\n    /// @return the result of the sub\n    function sub(euint32 lhs, euint32 rhs) internal pure returns (euint32) {\n        return FHE.sub(lhs, rhs);\n    }\n    \n    /// @notice Performs the eq operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint32\n    /// @return the result of the eq\n    function eq(euint32 lhs, euint32 rhs) internal pure returns (ebool) {\n        return FHE.eq(lhs, rhs);\n    }\n    \n    /// @notice Performs the ne operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint32\n    /// @return the result of the ne\n    function ne(euint32 lhs, euint32 rhs) internal pure returns (ebool) {\n        return FHE.ne(lhs, rhs);\n    }\n    \n    /// @notice Performs the and operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint32\n    /// @return the result of the and\n    function and(euint32 lhs, euint32 rhs) internal pure returns (euint32) {\n        return FHE.and(lhs, rhs);\n    }\n    \n    /// @notice Performs the or operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint32\n    /// @return the result of the or\n    function or(euint32 lhs, euint32 rhs) internal pure returns (euint32) {\n        return FHE.or(lhs, rhs);\n    }\n    \n    /// @notice Performs the xor operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint32\n    /// @return the result of the xor\n    function xor(euint32 lhs, euint32 rhs) internal pure returns (euint32) {\n        return FHE.xor(lhs, rhs);\n    }\n    \n    /// @notice Performs the gt operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint32\n    /// @return the result of the gt\n    function gt(euint32 lhs, euint32 rhs) internal pure returns (ebool) {\n        return FHE.gt(lhs, rhs);\n    }\n    \n    /// @notice Performs the gte operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint32\n    /// @return the result of the gte\n    function gte(euint32 lhs, euint32 rhs) internal pure returns (ebool) {\n        return FHE.gte(lhs, rhs);\n    }\n    \n    /// @notice Performs the lt operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint32\n    /// @return the result of the lt\n    function lt(euint32 lhs, euint32 rhs) internal pure returns (ebool) {\n        return FHE.lt(lhs, rhs);\n    }\n    \n    /// @notice Performs the lte operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint32\n    /// @return the result of the lte\n    function lte(euint32 lhs, euint32 rhs) internal pure returns (ebool) {\n        return FHE.lte(lhs, rhs);\n    }\n    \n    /// @notice Performs the rem operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint32\n    /// @return the result of the rem\n    function rem(euint32 lhs, euint32 rhs) internal pure returns (euint32) {\n        return FHE.rem(lhs, rhs);\n    }\n    \n    /// @notice Performs the max operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint32\n    /// @return the result of the max\n    function max(euint32 lhs, euint32 rhs) internal pure returns (euint32) {\n        return FHE.max(lhs, rhs);\n    }\n    \n    /// @notice Performs the min operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint32\n    /// @return the result of the min\n    function min(euint32 lhs, euint32 rhs) internal pure returns (euint32) {\n        return FHE.min(lhs, rhs);\n    }\n    \n    /// @notice Performs the shl operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint32\n    /// @return the result of the shl\n    function shl(euint32 lhs, euint32 rhs) internal pure returns (euint32) {\n        return FHE.shl(lhs, rhs);\n    }\n    \n    /// @notice Performs the shr operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint32\n    /// @return the result of the shr\n    function shr(euint32 lhs, euint32 rhs) internal pure returns (euint32) {\n        return FHE.shr(lhs, rhs);\n    }\n    function toBool(euint32 value) internal pure returns (ebool) {\n        return FHE.asEbool(value);\n    }\n    function toU8(euint32 value) internal pure returns (euint8) {\n        return FHE.asEuint8(value);\n    }\n    function toU16(euint32 value) internal pure returns (euint16) {\n        return FHE.asEuint16(value);\n    }\n    function toU64(euint32 value) internal pure returns (euint64) {\n        return FHE.asEuint64(value);\n    }\n    function toU128(euint32 value) internal pure returns (euint128) {\n        return FHE.asEuint128(value);\n    }\n    function toU256(euint32 value) internal pure returns (euint256) {\n        return FHE.asEuint256(value);\n    }\n    function toEaddress(euint32 value) internal pure returns (eaddress) {\n        return FHE.asEaddress(value);\n    }\n    function seal(euint32 value, bytes32 publicKey) internal pure returns (string memory) {\n        return FHE.sealoutput(value, publicKey);\n    }\n    function decrypt(euint32 value) internal pure returns (uint32) {\n        return FHE.decrypt(value);\n    }\n}\n\nusing BindingsEuint64 for euint64 global;\nlibrary BindingsEuint64 {\n    \n    /// @notice Performs the add operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint64\n    /// @return the result of the add\n    function add(euint64 lhs, euint64 rhs) internal pure returns (euint64) {\n        return FHE.add(lhs, rhs);\n    }\n    \n    /// @notice Performs the mul operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint64\n    /// @return the result of the mul\n    function mul(euint64 lhs, euint64 rhs) internal pure returns (euint64) {\n        return FHE.mul(lhs, rhs);\n    }\n    \n    /// @notice Performs the sub operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint64\n    /// @return the result of the sub\n    function sub(euint64 lhs, euint64 rhs) internal pure returns (euint64) {\n        return FHE.sub(lhs, rhs);\n    }\n    \n    /// @notice Performs the eq operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint64\n    /// @return the result of the eq\n    function eq(euint64 lhs, euint64 rhs) internal pure returns (ebool) {\n        return FHE.eq(lhs, rhs);\n    }\n    \n    /// @notice Performs the ne operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint64\n    /// @return the result of the ne\n    function ne(euint64 lhs, euint64 rhs) internal pure returns (ebool) {\n        return FHE.ne(lhs, rhs);\n    }\n    \n    /// @notice Performs the and operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint64\n    /// @return the result of the and\n    function and(euint64 lhs, euint64 rhs) internal pure returns (euint64) {\n        return FHE.and(lhs, rhs);\n    }\n    \n    /// @notice Performs the or operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint64\n    /// @return the result of the or\n    function or(euint64 lhs, euint64 rhs) internal pure returns (euint64) {\n        return FHE.or(lhs, rhs);\n    }\n    \n    /// @notice Performs the xor operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint64\n    /// @return the result of the xor\n    function xor(euint64 lhs, euint64 rhs) internal pure returns (euint64) {\n        return FHE.xor(lhs, rhs);\n    }\n    \n    /// @notice Performs the gt operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint64\n    /// @return the result of the gt\n    function gt(euint64 lhs, euint64 rhs) internal pure returns (ebool) {\n        return FHE.gt(lhs, rhs);\n    }\n    \n    /// @notice Performs the gte operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint64\n    /// @return the result of the gte\n    function gte(euint64 lhs, euint64 rhs) internal pure returns (ebool) {\n        return FHE.gte(lhs, rhs);\n    }\n    \n    /// @notice Performs the lt operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint64\n    /// @return the result of the lt\n    function lt(euint64 lhs, euint64 rhs) internal pure returns (ebool) {\n        return FHE.lt(lhs, rhs);\n    }\n    \n    /// @notice Performs the lte operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint64\n    /// @return the result of the lte\n    function lte(euint64 lhs, euint64 rhs) internal pure returns (ebool) {\n        return FHE.lte(lhs, rhs);\n    }\n    \n    /// @notice Performs the max operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint64\n    /// @return the result of the max\n    function max(euint64 lhs, euint64 rhs) internal pure returns (euint64) {\n        return FHE.max(lhs, rhs);\n    }\n    \n    /// @notice Performs the min operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint64\n    /// @return the result of the min\n    function min(euint64 lhs, euint64 rhs) internal pure returns (euint64) {\n        return FHE.min(lhs, rhs);\n    }\n    \n    /// @notice Performs the shl operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint64\n    /// @return the result of the shl\n    function shl(euint64 lhs, euint64 rhs) internal pure returns (euint64) {\n        return FHE.shl(lhs, rhs);\n    }\n    \n    /// @notice Performs the shr operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint64\n    /// @return the result of the shr\n    function shr(euint64 lhs, euint64 rhs) internal pure returns (euint64) {\n        return FHE.shr(lhs, rhs);\n    }\n    function toBool(euint64 value) internal pure returns (ebool) {\n        return FHE.asEbool(value);\n    }\n    function toU8(euint64 value) internal pure returns (euint8) {\n        return FHE.asEuint8(value);\n    }\n    function toU16(euint64 value) internal pure returns (euint16) {\n        return FHE.asEuint16(value);\n    }\n    function toU32(euint64 value) internal pure returns (euint32) {\n        return FHE.asEuint32(value);\n    }\n    function toU128(euint64 value) internal pure returns (euint128) {\n        return FHE.asEuint128(value);\n    }\n    function toU256(euint64 value) internal pure returns (euint256) {\n        return FHE.asEuint256(value);\n    }\n    function toEaddress(euint64 value) internal pure returns (eaddress) {\n        return FHE.asEaddress(value);\n    }\n    function seal(euint64 value, bytes32 publicKey) internal pure returns (string memory) {\n        return FHE.sealoutput(value, publicKey);\n    }\n    function decrypt(euint64 value) internal pure returns (uint64) {\n        return FHE.decrypt(value);\n    }\n}\n\nusing BindingsEuint128 for euint128 global;\nlibrary BindingsEuint128 {\n    \n    /// @notice Performs the add operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint128\n    /// @return the result of the add\n    function add(euint128 lhs, euint128 rhs) internal pure returns (euint128) {\n        return FHE.add(lhs, rhs);\n    }\n    \n    /// @notice Performs the sub operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint128\n    /// @return the result of the sub\n    function sub(euint128 lhs, euint128 rhs) internal pure returns (euint128) {\n        return FHE.sub(lhs, rhs);\n    }\n    \n    /// @notice Performs the eq operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint128\n    /// @return the result of the eq\n    function eq(euint128 lhs, euint128 rhs) internal pure returns (ebool) {\n        return FHE.eq(lhs, rhs);\n    }\n    \n    /// @notice Performs the ne operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint128\n    /// @return the result of the ne\n    function ne(euint128 lhs, euint128 rhs) internal pure returns (ebool) {\n        return FHE.ne(lhs, rhs);\n    }\n    \n    /// @notice Performs the and operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint128\n    /// @return the result of the and\n    function and(euint128 lhs, euint128 rhs) internal pure returns (euint128) {\n        return FHE.and(lhs, rhs);\n    }\n    \n    /// @notice Performs the or operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint128\n    /// @return the result of the or\n    function or(euint128 lhs, euint128 rhs) internal pure returns (euint128) {\n        return FHE.or(lhs, rhs);\n    }\n    \n    /// @notice Performs the xor operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint128\n    /// @return the result of the xor\n    function xor(euint128 lhs, euint128 rhs) internal pure returns (euint128) {\n        return FHE.xor(lhs, rhs);\n    }\n    \n    /// @notice Performs the gt operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint128\n    /// @return the result of the gt\n    function gt(euint128 lhs, euint128 rhs) internal pure returns (ebool) {\n        return FHE.gt(lhs, rhs);\n    }\n    \n    /// @notice Performs the gte operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint128\n    /// @return the result of the gte\n    function gte(euint128 lhs, euint128 rhs) internal pure returns (ebool) {\n        return FHE.gte(lhs, rhs);\n    }\n    \n    /// @notice Performs the lt operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint128\n    /// @return the result of the lt\n    function lt(euint128 lhs, euint128 rhs) internal pure returns (ebool) {\n        return FHE.lt(lhs, rhs);\n    }\n    \n    /// @notice Performs the lte operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint128\n    /// @return the result of the lte\n    function lte(euint128 lhs, euint128 rhs) internal pure returns (ebool) {\n        return FHE.lte(lhs, rhs);\n    }\n    \n    /// @notice Performs the max operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint128\n    /// @return the result of the max\n    function max(euint128 lhs, euint128 rhs) internal pure returns (euint128) {\n        return FHE.max(lhs, rhs);\n    }\n    \n    /// @notice Performs the min operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint128\n    /// @return the result of the min\n    function min(euint128 lhs, euint128 rhs) internal pure returns (euint128) {\n        return FHE.min(lhs, rhs);\n    }\n    \n    /// @notice Performs the shl operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint128\n    /// @return the result of the shl\n    function shl(euint128 lhs, euint128 rhs) internal pure returns (euint128) {\n        return FHE.shl(lhs, rhs);\n    }\n    \n    /// @notice Performs the shr operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint128\n    /// @return the result of the shr\n    function shr(euint128 lhs, euint128 rhs) internal pure returns (euint128) {\n        return FHE.shr(lhs, rhs);\n    }\n    function toBool(euint128 value) internal pure returns (ebool) {\n        return FHE.asEbool(value);\n    }\n    function toU8(euint128 value) internal pure returns (euint8) {\n        return FHE.asEuint8(value);\n    }\n    function toU16(euint128 value) internal pure returns (euint16) {\n        return FHE.asEuint16(value);\n    }\n    function toU32(euint128 value) internal pure returns (euint32) {\n        return FHE.asEuint32(value);\n    }\n    function toU64(euint128 value) internal pure returns (euint64) {\n        return FHE.asEuint64(value);\n    }\n    function toU256(euint128 value) internal pure returns (euint256) {\n        return FHE.asEuint256(value);\n    }\n    function toEaddress(euint128 value) internal pure returns (eaddress) {\n        return FHE.asEaddress(value);\n    }\n    function seal(euint128 value, bytes32 publicKey) internal pure returns (string memory) {\n        return FHE.sealoutput(value, publicKey);\n    }\n    function decrypt(euint128 value) internal pure returns (uint128) {\n        return FHE.decrypt(value);\n    }\n}\n\nusing BindingsEuint256 for euint256 global;\nlibrary BindingsEuint256 {\n    \n    /// @notice Performs the eq operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint256\n    /// @return the result of the eq\n    function eq(euint256 lhs, euint256 rhs) internal pure returns (ebool) {\n        return FHE.eq(lhs, rhs);\n    }\n    \n    /// @notice Performs the ne operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type euint256\n    /// @return the result of the ne\n    function ne(euint256 lhs, euint256 rhs) internal pure returns (ebool) {\n        return FHE.ne(lhs, rhs);\n    }\n    function toBool(euint256 value) internal pure returns (ebool) {\n        return FHE.asEbool(value);\n    }\n    function toU8(euint256 value) internal pure returns (euint8) {\n        return FHE.asEuint8(value);\n    }\n    function toU16(euint256 value) internal pure returns (euint16) {\n        return FHE.asEuint16(value);\n    }\n    function toU32(euint256 value) internal pure returns (euint32) {\n        return FHE.asEuint32(value);\n    }\n    function toU64(euint256 value) internal pure returns (euint64) {\n        return FHE.asEuint64(value);\n    }\n    function toU128(euint256 value) internal pure returns (euint128) {\n        return FHE.asEuint128(value);\n    }\n    function toEaddress(euint256 value) internal pure returns (eaddress) {\n        return FHE.asEaddress(value);\n    }\n    function seal(euint256 value, bytes32 publicKey) internal pure returns (string memory) {\n        return FHE.sealoutput(value, publicKey);\n    }\n    function decrypt(euint256 value) internal pure returns (uint256) {\n        return FHE.decrypt(value);\n    }\n}\n\nusing BindingsEaddress for eaddress global;\nlibrary BindingsEaddress {\n    \n    /// @notice Performs the eq operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type eaddress\n    /// @return the result of the eq\n    function eq(eaddress lhs, eaddress rhs) internal pure returns (ebool) {\n        return FHE.eq(lhs, rhs);\n    }\n    \n    /// @notice Performs the ne operation\n    /// @dev Pure in this function is marked as a hack/workaround - note that this function is NOT pure as fetches of ciphertexts require state access\n    /// @param lhs input of type eaddress\n    /// @return the result of the ne\n    function ne(eaddress lhs, eaddress rhs) internal pure returns (ebool) {\n        return FHE.ne(lhs, rhs);\n    }\n    function toBool(eaddress value) internal pure returns (ebool) {\n        return FHE.asEbool(value);\n    }\n    function toU8(eaddress value) internal pure returns (euint8) {\n        return FHE.asEuint8(value);\n    }\n    function toU16(eaddress value) internal pure returns (euint16) {\n        return FHE.asEuint16(value);\n    }\n    function toU32(eaddress value) internal pure returns (euint32) {\n        return FHE.asEuint32(value);\n    }\n    function toU64(eaddress value) internal pure returns (euint64) {\n        return FHE.asEuint64(value);\n    }\n    function toU128(eaddress value) internal pure returns (euint128) {\n        return FHE.asEuint128(value);\n    }\n    function toU256(eaddress value) internal pure returns (euint256) {\n        return FHE.asEuint256(value);\n    }\n    function seal(eaddress value, bytes32 publicKey) internal pure returns (string memory) {\n        return FHE.sealoutput(value, publicKey);\n    }\n    function decrypt(eaddress value) internal pure returns (address) {\n        return FHE.decrypt(value);\n    }\n}"
    },
    "@fhenixprotocol/contracts/FheOS.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause-Clear\n// solhint-disable one-contract-per-file\npragma solidity >=0.8.13 <0.9.0;\n\nlibrary Precompiles {\n    //solhint-disable const-name-snakecase\n    address public constant Fheos = address(128);\n}\n\ninterface FheOps {\n    function log(string memory s) external pure;\n    function add(uint8 utype, bytes memory lhsHash, bytes memory rhsHash) external pure returns (bytes memory);\n    function verify(uint8 utype, bytes memory input) external pure returns (bytes memory);\n    function sealOutput(uint8 utype, bytes memory ctHash, bytes memory pk) external pure returns (string memory);\n    function decrypt(uint8 utype, bytes memory input) external pure returns (uint256);\n    function lte(uint8 utype, bytes memory lhsHash, bytes memory rhsHash) external pure returns (bytes memory);\n    function sub(uint8 utype, bytes memory lhsHash, bytes memory rhsHash) external pure returns (bytes memory);\n    function mul(uint8 utype, bytes memory lhsHash, bytes memory rhsHash) external pure returns (bytes memory);\n    function lt(uint8 utype, bytes memory lhsHash, bytes memory rhsHash) external pure returns (bytes memory);\n    function select(uint8 utype, bytes memory controlHash, bytes memory ifTrueHash, bytes memory ifFalseHash) external pure returns (bytes memory);\n    function req(uint8 utype, bytes memory input) external pure returns (bytes memory);\n    function cast(uint8 utype, bytes memory input, uint8 toType) external pure returns (bytes memory);\n    function trivialEncrypt(bytes memory input, uint8 toType) external pure returns (bytes memory);\n    function div(uint8 utype, bytes memory lhsHash, bytes memory rhsHash) external pure returns (bytes memory);\n    function gt(uint8 utype, bytes memory lhsHash, bytes memory rhsHash) external pure returns (bytes memory);\n    function gte(uint8 utype, bytes memory lhsHash, bytes memory rhsHash) external pure returns (bytes memory);\n    function rem(uint8 utype, bytes memory lhsHash, bytes memory rhsHash) external pure returns (bytes memory);\n    function and(uint8 utype, bytes memory lhsHash, bytes memory rhsHash) external pure returns (bytes memory);\n    function or(uint8 utype, bytes memory lhsHash, bytes memory rhsHash) external pure returns (bytes memory);\n    function xor(uint8 utype, bytes memory lhsHash, bytes memory rhsHash) external pure returns (bytes memory);\n    function eq(uint8 utype, bytes memory lhsHash, bytes memory rhsHash) external pure returns (bytes memory);\n    function ne(uint8 utype, bytes memory lhsHash, bytes memory rhsHash) external pure returns (bytes memory);\n    function min(uint8 utype, bytes memory lhsHash, bytes memory rhsHash) external pure returns (bytes memory);\n    function max(uint8 utype, bytes memory lhsHash, bytes memory rhsHash) external pure returns (bytes memory);\n    function shl(uint8 utype, bytes memory lhsHash, bytes memory rhsHash) external pure returns (bytes memory);\n    function shr(uint8 utype, bytes memory lhsHash, bytes memory rhsHash) external pure returns (bytes memory);\n    function not(uint8 utype, bytes memory value) external pure returns (bytes memory);\n    function getNetworkPublicKey() external pure returns (bytes memory);\n}"
    },
    "@fhenixprotocol/contracts/utils/debug/Console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.19 <0.9.0;\n\nimport {FheOps, Precompiles} from \"../../FheOS.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\nlibrary Console {\n    function _logImpl(string memory payload) internal pure {\n        FheOps(Precompiles.Fheos).log(payload);\n    }\n\n    function _logImpl2Params(string memory p0, string memory p1) internal pure {\n        string memory payload = string(abi.encodePacked(string(\"p0: \"), p0, string(\" p1: \"), p1));\n        _logImpl(payload);\n    }\n\n    function _logImpl3Params(string memory p0, string memory p1, string memory p2) internal pure {\n        string memory payload = string(abi.encodePacked(string(\"p0: \"), p0, string(\" p1: \"), \n        p1, string(\" p2: \"), p2));\n        _logImpl(payload);\n    }\n\n    function _intToString(int _value) internal pure returns (string memory) {\n        return Strings.toStringSigned(_value);\n    }\n\n    function _uintToString(uint _value) internal pure returns (string memory) {\n        return Strings.toString(_value);\n    }\n\n    function _addressToString(address _addr) internal pure returns (string memory) {\n        bytes memory alphabet = \"0123456789abcdef\";\n        bytes20 value = bytes20(_addr);\n        bytes memory buffer = new bytes(42); // 2 characters for '0x' and 40 characters for the address\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 0; i < 20; i++) {\n            buffer[2+i*2] = alphabet[uint8(value[i] >> 4)];\n            buffer[3+i*2] = alphabet[uint8(value[i] & 0x0f)];\n        }\n        return string(buffer);\n    }\n\n    function _boolToString(bool val) internal pure returns (string memory) {\n        return val ? \"true\" : \"false\";\n    }\n\n    function _logInt(int256 p0) internal pure {\n        _logImpl(_intToString(p0));\n    }\n\n    function _logUint(uint256 p0) internal pure {\n        _logImpl(_uintToString(p0));\n    }\n\n    function _logBool(bool p0) internal pure {\n        _logImpl(_boolToString(p0));\n    }\n\n    function _logAddress(address p0) internal pure {\n        _logImpl(_addressToString(p0));\n    }\n\n    function logBytes(bytes memory p0) internal pure {\n        _logImpl(string(p0));\n    }\n\n    function log(int256 p0) internal pure {\n        _logInt(p0);\n    }\n\n    function log(uint256 p0) internal pure {\n        _logUint(p0);\n    }\n\n    function log(string memory p0) internal pure {\n       _logImpl(p0);\n    }\n\n    function log(bool p0) internal pure {\n        _logBool(p0);\n    }\n\n    function log(address p0) internal pure {\n        _logAddress(p0);\n    }\n\tfunction log(int256 p0, int256 p1) internal pure {\n    \t_logImpl2Params(_intToString(p0), _intToString(p1));\n\t}\n\n\tfunction log(int256 p0, uint256 p1) internal pure {\n    \t_logImpl2Params(_intToString(p0), _uintToString(p1));\n\t}\n\n\tfunction log(int256 p0, string memory p1) internal pure {\n    \t_logImpl2Params(_intToString(p0), p1);\n\t}\n\n\tfunction log(int256 p0, bool p1) internal pure {\n    \t_logImpl2Params(_intToString(p0), _boolToString(p1));\n\t}\n\n\tfunction log(int256 p0, address p1) internal pure {\n    \t_logImpl2Params(_intToString(p0), _addressToString(p1));\n\t}\n\n\tfunction log(uint256 p0, int256 p1) internal pure {\n    \t_logImpl2Params(_uintToString(p0), _intToString(p1));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1) internal pure {\n    \t_logImpl2Params(_uintToString(p0), _uintToString(p1));\n\t}\n\n\tfunction log(uint256 p0, string memory p1) internal pure {\n    \t_logImpl2Params(_uintToString(p0), p1);\n\t}\n\n\tfunction log(uint256 p0, bool p1) internal pure {\n    \t_logImpl2Params(_uintToString(p0), _boolToString(p1));\n\t}\n\n\tfunction log(uint256 p0, address p1) internal pure {\n    \t_logImpl2Params(_uintToString(p0), _addressToString(p1));\n\t}\n\n\tfunction log(string memory p0, int256 p1) internal pure {\n    \t_logImpl2Params(p0, _intToString(p1));\n\t}\n\n\tfunction log(string memory p0, uint256 p1) internal pure {\n    \t_logImpl2Params(p0, _uintToString(p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal pure {\n    \t_logImpl2Params(p0, p1);\n\t}\n\n\tfunction log(string memory p0, bool p1) internal pure {\n    \t_logImpl2Params(p0, _boolToString(p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal pure {\n    \t_logImpl2Params(p0, _addressToString(p1));\n\t}\n\n\tfunction log(bool p0, int256 p1) internal pure {\n    \t_logImpl2Params(_boolToString(p0), _intToString(p1));\n\t}\n\n\tfunction log(bool p0, uint256 p1) internal pure {\n    \t_logImpl2Params(_boolToString(p0), _uintToString(p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal pure {\n    \t_logImpl2Params(_boolToString(p0), p1);\n\t}\n\n\tfunction log(bool p0, bool p1) internal pure {\n    \t_logImpl2Params(_boolToString(p0), _boolToString(p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal pure {\n    \t_logImpl2Params(_boolToString(p0), _addressToString(p1));\n\t}\n\n\tfunction log(address p0, int256 p1) internal pure {\n    \t_logImpl2Params(_addressToString(p0), _intToString(p1));\n\t}\n\n\tfunction log(address p0, uint256 p1) internal pure {\n    \t_logImpl2Params(_addressToString(p0), _uintToString(p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal pure {\n    \t_logImpl2Params(_addressToString(p0), p1);\n\t}\n\n\tfunction log(address p0, bool p1) internal pure {\n    \t_logImpl2Params(_addressToString(p0), _boolToString(p1));\n\t}\n\n\tfunction log(address p0, address p1) internal pure {\n    \t_logImpl2Params(_addressToString(p0), _addressToString(p1));\n\t}\n\n\tfunction log(int256 p0, int256 p1, int256 p2) internal pure {\n    \t_logImpl3Params(_intToString(p0), _intToString(p1), _intToString(p2));\n\t}\n\n\tfunction log(int256 p0, int256 p1, uint256 p2) internal pure {\n    \t_logImpl3Params(_intToString(p0), _intToString(p1), _uintToString(p2));\n\t}\n\n\tfunction log(int256 p0, int256 p1, string memory p2) internal pure {\n    \t_logImpl3Params(_intToString(p0), _intToString(p1), p2);\n\t}\n\n\tfunction log(int256 p0, int256 p1, bool p2) internal pure {\n    \t_logImpl3Params(_intToString(p0), _intToString(p1), _boolToString(p2));\n\t}\n\n\tfunction log(int256 p0, int256 p1, address p2) internal pure {\n    \t_logImpl3Params(_intToString(p0), _intToString(p1), _addressToString(p2));\n\t}\n\n\tfunction log(int256 p0, uint256 p1, int256 p2) internal pure {\n    \t_logImpl3Params(_intToString(p0), _uintToString(p1), _intToString(p2));\n\t}\n\n\tfunction log(int256 p0, uint256 p1, uint256 p2) internal pure {\n    \t_logImpl3Params(_intToString(p0), _uintToString(p1), _uintToString(p2));\n\t}\n\n\tfunction log(int256 p0, uint256 p1, string memory p2) internal pure {\n    \t_logImpl3Params(_intToString(p0), _uintToString(p1), p2);\n\t}\n\n\tfunction log(int256 p0, uint256 p1, bool p2) internal pure {\n    \t_logImpl3Params(_intToString(p0), _uintToString(p1), _boolToString(p2));\n\t}\n\n\tfunction log(int256 p0, uint256 p1, address p2) internal pure {\n    \t_logImpl3Params(_intToString(p0), _uintToString(p1), _addressToString(p2));\n\t}\n\n\tfunction log(int256 p0, string memory p1, int256 p2) internal pure {\n    \t_logImpl3Params(_intToString(p0), p1, _intToString(p2));\n\t}\n\n\tfunction log(int256 p0, string memory p1, uint256 p2) internal pure {\n    \t_logImpl3Params(_intToString(p0), p1, _uintToString(p2));\n\t}\n\n\tfunction log(int256 p0, string memory p1, string memory p2) internal pure {\n    \t_logImpl3Params(_intToString(p0), p1, p2);\n\t}\n\n\tfunction log(int256 p0, string memory p1, bool p2) internal pure {\n    \t_logImpl3Params(_intToString(p0), p1, _boolToString(p2));\n\t}\n\n\tfunction log(int256 p0, string memory p1, address p2) internal pure {\n    \t_logImpl3Params(_intToString(p0), p1, _addressToString(p2));\n\t}\n\n\tfunction log(int256 p0, bool p1, int256 p2) internal pure {\n    \t_logImpl3Params(_intToString(p0), _boolToString(p1), _intToString(p2));\n\t}\n\n\tfunction log(int256 p0, bool p1, uint256 p2) internal pure {\n    \t_logImpl3Params(_intToString(p0), _boolToString(p1), _uintToString(p2));\n\t}\n\n\tfunction log(int256 p0, bool p1, string memory p2) internal pure {\n    \t_logImpl3Params(_intToString(p0), _boolToString(p1), p2);\n\t}\n\n\tfunction log(int256 p0, bool p1, bool p2) internal pure {\n    \t_logImpl3Params(_intToString(p0), _boolToString(p1), _boolToString(p2));\n\t}\n\n\tfunction log(int256 p0, bool p1, address p2) internal pure {\n    \t_logImpl3Params(_intToString(p0), _boolToString(p1), _addressToString(p2));\n\t}\n\n\tfunction log(int256 p0, address p1, int256 p2) internal pure {\n    \t_logImpl3Params(_intToString(p0), _addressToString(p1), _intToString(p2));\n\t}\n\n\tfunction log(int256 p0, address p1, uint256 p2) internal pure {\n    \t_logImpl3Params(_intToString(p0), _addressToString(p1), _uintToString(p2));\n\t}\n\n\tfunction log(int256 p0, address p1, string memory p2) internal pure {\n    \t_logImpl3Params(_intToString(p0), _addressToString(p1), p2);\n\t}\n\n\tfunction log(int256 p0, address p1, bool p2) internal pure {\n    \t_logImpl3Params(_intToString(p0), _addressToString(p1), _boolToString(p2));\n\t}\n\n\tfunction log(int256 p0, address p1, address p2) internal pure {\n    \t_logImpl3Params(_intToString(p0), _addressToString(p1), _addressToString(p2));\n\t}\n\n\tfunction log(uint256 p0, int256 p1, int256 p2) internal pure {\n    \t_logImpl3Params(_uintToString(p0), _intToString(p1), _intToString(p2));\n\t}\n\n\tfunction log(uint256 p0, int256 p1, uint256 p2) internal pure {\n    \t_logImpl3Params(_uintToString(p0), _intToString(p1), _uintToString(p2));\n\t}\n\n\tfunction log(uint256 p0, int256 p1, string memory p2) internal pure {\n    \t_logImpl3Params(_uintToString(p0), _intToString(p1), p2);\n\t}\n\n\tfunction log(uint256 p0, int256 p1, bool p2) internal pure {\n    \t_logImpl3Params(_uintToString(p0), _intToString(p1), _boolToString(p2));\n\t}\n\n\tfunction log(uint256 p0, int256 p1, address p2) internal pure {\n    \t_logImpl3Params(_uintToString(p0), _intToString(p1), _addressToString(p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, int256 p2) internal pure {\n    \t_logImpl3Params(_uintToString(p0), _uintToString(p1), _intToString(p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal pure {\n    \t_logImpl3Params(_uintToString(p0), _uintToString(p1), _uintToString(p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2) internal pure {\n    \t_logImpl3Params(_uintToString(p0), _uintToString(p1), p2);\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2) internal pure {\n    \t_logImpl3Params(_uintToString(p0), _uintToString(p1), _boolToString(p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2) internal pure {\n    \t_logImpl3Params(_uintToString(p0), _uintToString(p1), _addressToString(p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, int256 p2) internal pure {\n    \t_logImpl3Params(_uintToString(p0), p1, _intToString(p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2) internal pure {\n    \t_logImpl3Params(_uintToString(p0), p1, _uintToString(p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2) internal pure {\n    \t_logImpl3Params(_uintToString(p0), p1, p2);\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2) internal pure {\n    \t_logImpl3Params(_uintToString(p0), p1, _boolToString(p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2) internal pure {\n    \t_logImpl3Params(_uintToString(p0), p1, _addressToString(p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, int256 p2) internal pure {\n    \t_logImpl3Params(_uintToString(p0), _boolToString(p1), _intToString(p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2) internal pure {\n    \t_logImpl3Params(_uintToString(p0), _boolToString(p1), _uintToString(p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2) internal pure {\n    \t_logImpl3Params(_uintToString(p0), _boolToString(p1), p2);\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2) internal pure {\n    \t_logImpl3Params(_uintToString(p0), _boolToString(p1), _boolToString(p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2) internal pure {\n    \t_logImpl3Params(_uintToString(p0), _boolToString(p1), _addressToString(p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, int256 p2) internal pure {\n    \t_logImpl3Params(_uintToString(p0), _addressToString(p1), _intToString(p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2) internal pure {\n    \t_logImpl3Params(_uintToString(p0), _addressToString(p1), _uintToString(p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2) internal pure {\n    \t_logImpl3Params(_uintToString(p0), _addressToString(p1), p2);\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2) internal pure {\n    \t_logImpl3Params(_uintToString(p0), _addressToString(p1), _boolToString(p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2) internal pure {\n    \t_logImpl3Params(_uintToString(p0), _addressToString(p1), _addressToString(p2));\n\t}\n\n\tfunction log(string memory p0, int256 p1, int256 p2) internal pure {\n    \t_logImpl3Params(p0, _intToString(p1), _intToString(p2));\n\t}\n\n\tfunction log(string memory p0, int256 p1, uint256 p2) internal pure {\n    \t_logImpl3Params(p0, _intToString(p1), _uintToString(p2));\n\t}\n\n\tfunction log(string memory p0, int256 p1, string memory p2) internal pure {\n    \t_logImpl3Params(p0, _intToString(p1), p2);\n\t}\n\n\tfunction log(string memory p0, int256 p1, bool p2) internal pure {\n    \t_logImpl3Params(p0, _intToString(p1), _boolToString(p2));\n\t}\n\n\tfunction log(string memory p0, int256 p1, address p2) internal pure {\n    \t_logImpl3Params(p0, _intToString(p1), _addressToString(p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, int256 p2) internal pure {\n    \t_logImpl3Params(p0, _uintToString(p1), _intToString(p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2) internal pure {\n    \t_logImpl3Params(p0, _uintToString(p1), _uintToString(p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2) internal pure {\n    \t_logImpl3Params(p0, _uintToString(p1), p2);\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2) internal pure {\n    \t_logImpl3Params(p0, _uintToString(p1), _boolToString(p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2) internal pure {\n    \t_logImpl3Params(p0, _uintToString(p1), _addressToString(p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, int256 p2) internal pure {\n    \t_logImpl3Params(p0, p1, _intToString(p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2) internal pure {\n    \t_logImpl3Params(p0, p1, _uintToString(p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal pure {\n    \t_logImpl3Params(p0, p1, p2);\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal pure {\n    \t_logImpl3Params(p0, p1, _boolToString(p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal pure {\n    \t_logImpl3Params(p0, p1, _addressToString(p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, int256 p2) internal pure {\n    \t_logImpl3Params(p0, _boolToString(p1), _intToString(p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2) internal pure {\n    \t_logImpl3Params(p0, _boolToString(p1), _uintToString(p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal pure {\n    \t_logImpl3Params(p0, _boolToString(p1), p2);\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal pure {\n    \t_logImpl3Params(p0, _boolToString(p1), _boolToString(p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal pure {\n    \t_logImpl3Params(p0, _boolToString(p1), _addressToString(p2));\n\t}\n\n\tfunction log(string memory p0, address p1, int256 p2) internal pure {\n    \t_logImpl3Params(p0, _addressToString(p1), _intToString(p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2) internal pure {\n    \t_logImpl3Params(p0, _addressToString(p1), _uintToString(p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal pure {\n    \t_logImpl3Params(p0, _addressToString(p1), p2);\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal pure {\n    \t_logImpl3Params(p0, _addressToString(p1), _boolToString(p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal pure {\n    \t_logImpl3Params(p0, _addressToString(p1), _addressToString(p2));\n\t}\n\n\tfunction log(bool p0, int256 p1, int256 p2) internal pure {\n    \t_logImpl3Params(_boolToString(p0), _intToString(p1), _intToString(p2));\n\t}\n\n\tfunction log(bool p0, int256 p1, uint256 p2) internal pure {\n    \t_logImpl3Params(_boolToString(p0), _intToString(p1), _uintToString(p2));\n\t}\n\n\tfunction log(bool p0, int256 p1, string memory p2) internal pure {\n    \t_logImpl3Params(_boolToString(p0), _intToString(p1), p2);\n\t}\n\n\tfunction log(bool p0, int256 p1, bool p2) internal pure {\n    \t_logImpl3Params(_boolToString(p0), _intToString(p1), _boolToString(p2));\n\t}\n\n\tfunction log(bool p0, int256 p1, address p2) internal pure {\n    \t_logImpl3Params(_boolToString(p0), _intToString(p1), _addressToString(p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, int256 p2) internal pure {\n    \t_logImpl3Params(_boolToString(p0), _uintToString(p1), _intToString(p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2) internal pure {\n    \t_logImpl3Params(_boolToString(p0), _uintToString(p1), _uintToString(p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2) internal pure {\n    \t_logImpl3Params(_boolToString(p0), _uintToString(p1), p2);\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2) internal pure {\n    \t_logImpl3Params(_boolToString(p0), _uintToString(p1), _boolToString(p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2) internal pure {\n    \t_logImpl3Params(_boolToString(p0), _uintToString(p1), _addressToString(p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, int256 p2) internal pure {\n    \t_logImpl3Params(_boolToString(p0), p1, _intToString(p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2) internal pure {\n    \t_logImpl3Params(_boolToString(p0), p1, _uintToString(p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal pure {\n    \t_logImpl3Params(_boolToString(p0), p1, p2);\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal pure {\n    \t_logImpl3Params(_boolToString(p0), p1, _boolToString(p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal pure {\n    \t_logImpl3Params(_boolToString(p0), p1, _addressToString(p2));\n\t}\n\n\tfunction log(bool p0, bool p1, int256 p2) internal pure {\n    \t_logImpl3Params(_boolToString(p0), _boolToString(p1), _intToString(p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2) internal pure {\n    \t_logImpl3Params(_boolToString(p0), _boolToString(p1), _uintToString(p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal pure {\n    \t_logImpl3Params(_boolToString(p0), _boolToString(p1), p2);\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal pure {\n    \t_logImpl3Params(_boolToString(p0), _boolToString(p1), _boolToString(p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal pure {\n    \t_logImpl3Params(_boolToString(p0), _boolToString(p1), _addressToString(p2));\n\t}\n\n\tfunction log(bool p0, address p1, int256 p2) internal pure {\n    \t_logImpl3Params(_boolToString(p0), _addressToString(p1), _intToString(p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2) internal pure {\n    \t_logImpl3Params(_boolToString(p0), _addressToString(p1), _uintToString(p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal pure {\n    \t_logImpl3Params(_boolToString(p0), _addressToString(p1), p2);\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal pure {\n    \t_logImpl3Params(_boolToString(p0), _addressToString(p1), _boolToString(p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal pure {\n    \t_logImpl3Params(_boolToString(p0), _addressToString(p1), _addressToString(p2));\n\t}\n\n\tfunction log(address p0, int256 p1, int256 p2) internal pure {\n    \t_logImpl3Params(_addressToString(p0), _intToString(p1), _intToString(p2));\n\t}\n\n\tfunction log(address p0, int256 p1, uint256 p2) internal pure {\n    \t_logImpl3Params(_addressToString(p0), _intToString(p1), _uintToString(p2));\n\t}\n\n\tfunction log(address p0, int256 p1, string memory p2) internal pure {\n    \t_logImpl3Params(_addressToString(p0), _intToString(p1), p2);\n\t}\n\n\tfunction log(address p0, int256 p1, bool p2) internal pure {\n    \t_logImpl3Params(_addressToString(p0), _intToString(p1), _boolToString(p2));\n\t}\n\n\tfunction log(address p0, int256 p1, address p2) internal pure {\n    \t_logImpl3Params(_addressToString(p0), _intToString(p1), _addressToString(p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, int256 p2) internal pure {\n    \t_logImpl3Params(_addressToString(p0), _uintToString(p1), _intToString(p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2) internal pure {\n    \t_logImpl3Params(_addressToString(p0), _uintToString(p1), _uintToString(p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2) internal pure {\n    \t_logImpl3Params(_addressToString(p0), _uintToString(p1), p2);\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2) internal pure {\n    \t_logImpl3Params(_addressToString(p0), _uintToString(p1), _boolToString(p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2) internal pure {\n    \t_logImpl3Params(_addressToString(p0), _uintToString(p1), _addressToString(p2));\n\t}\n\n\tfunction log(address p0, string memory p1, int256 p2) internal pure {\n    \t_logImpl3Params(_addressToString(p0), p1, _intToString(p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2) internal pure {\n    \t_logImpl3Params(_addressToString(p0), p1, _uintToString(p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal pure {\n    \t_logImpl3Params(_addressToString(p0), p1, p2);\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal pure {\n    \t_logImpl3Params(_addressToString(p0), p1, _boolToString(p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal pure {\n    \t_logImpl3Params(_addressToString(p0), p1, _addressToString(p2));\n\t}\n\n\tfunction log(address p0, bool p1, int256 p2) internal pure {\n    \t_logImpl3Params(_addressToString(p0), _boolToString(p1), _intToString(p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2) internal pure {\n    \t_logImpl3Params(_addressToString(p0), _boolToString(p1), _uintToString(p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal pure {\n    \t_logImpl3Params(_addressToString(p0), _boolToString(p1), p2);\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal pure {\n    \t_logImpl3Params(_addressToString(p0), _boolToString(p1), _boolToString(p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal pure {\n    \t_logImpl3Params(_addressToString(p0), _boolToString(p1), _addressToString(p2));\n\t}\n\n\tfunction log(address p0, address p1, int256 p2) internal pure {\n    \t_logImpl3Params(_addressToString(p0), _addressToString(p1), _intToString(p2));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2) internal pure {\n    \t_logImpl3Params(_addressToString(p0), _addressToString(p1), _uintToString(p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal pure {\n    \t_logImpl3Params(_addressToString(p0), _addressToString(p1), p2);\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal pure {\n    \t_logImpl3Params(_addressToString(p0), _addressToString(p1), _boolToString(p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal pure {\n    \t_logImpl3Params(_addressToString(p0), _addressToString(p1), _addressToString(p2));\n\t}\n\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"./IAccessControl.sol\";\nimport {Context} from \"../utils/Context.sol\";\nimport {ERC165} from \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 role => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (!hasRole(role, account)) {\n            _roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (hasRole(role, account)) {\n            _roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"
    },
    "@openzeppelin/contracts/interfaces/IERC4906.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC4906.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\nimport {IERC721} from \"./IERC721.sol\";\n\n/// @title EIP-721 Metadata Update Extension\ninterface IERC4906 is IERC165, IERC721 {\n    /// @dev This event emits when the metadata of a token is changed.\n    /// So that the third-party platforms such as NFT market could\n    /// timely update the images and related attributes of the NFT.\n    event MetadataUpdate(uint256 _tokenId);\n\n    /// @dev This event emits when the metadata of a range of tokens is changed.\n    /// So that the third-party platforms such as NFT market could\n    /// timely update the images and related attributes of the NFTs.\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC5267.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\n\npragma solidity ^0.8.20;\n\ninterface IERC5267 {\n    /**\n     * @dev MAY be emitted to signal that the domain could have changed.\n     */\n    event EIP712DomainChanged();\n\n    /**\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\n     * signature.\n     */\n    function eip712Domain()\n        external\n        view\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        );\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721} from \"../token/ERC721/IERC721.sol\";\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721} from \"./IERC721.sol\";\nimport {IERC721Receiver} from \"./IERC721Receiver.sol\";\nimport {IERC721Metadata} from \"./extensions/IERC721Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {Strings} from \"../../utils/Strings.sol\";\nimport {IERC165, ERC165} from \"../../utils/introspection/ERC165.sol\";\nimport {IERC721Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    mapping(uint256 tokenId => address) private _owners;\n\n    mapping(address owner => uint256) private _balances;\n\n    mapping(uint256 tokenId => address) private _tokenApprovals;\n\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual returns (uint256) {\n        if (owner == address(0)) {\n            revert ERC721InvalidOwner(address(0));\n        }\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\n        return _requireOwned(tokenId);\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\n        _requireOwned(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual {\n        _approve(to, tokenId, _msgSender());\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\n        _requireOwned(tokenId);\n\n        return _getApproved(tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        // Setting an \"auth\" arguments enables the `_isAuthorized` check which verifies that the token exists\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\n        address previousOwner = _update(to, tokenId, _msgSender());\n        if (previousOwner != from) {\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\n        }\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\n        transferFrom(from, to, tokenId);\n        _checkOnERC721Received(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     *\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\n     */\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\n     * particular (ignoring whether it is owned by `owner`).\n     *\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n     * assumption.\n     */\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\n        return\n            spender != address(0) &&\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\n     * the `spender` for the specific `tokenId`.\n     *\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n     * assumption.\n     */\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\n        if (!_isAuthorized(owner, spender, tokenId)) {\n            if (owner == address(0)) {\n                revert ERC721NonexistentToken(tokenId);\n            } else {\n                revert ERC721InsufficientApproval(spender, tokenId);\n            }\n        }\n    }\n\n    /**\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n     *\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\n     *\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\n     * remain consistent with one another.\n     */\n    function _increaseBalance(address account, uint128 value) internal virtual {\n        unchecked {\n            _balances[account] += value;\n        }\n    }\n\n    /**\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\n     *\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\n     */\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\n        address from = _ownerOf(tokenId);\n\n        // Perform (optional) operator check\n        if (auth != address(0)) {\n            _checkAuthorized(from, auth, tokenId);\n        }\n\n        // Execute the update\n        if (from != address(0)) {\n            // Clear approval. No need to re-authorize or emit the Approval event\n            _approve(address(0), tokenId, address(0), false);\n\n            unchecked {\n                _balances[from] -= 1;\n            }\n        }\n\n        if (to != address(0)) {\n            unchecked {\n                _balances[to] += 1;\n            }\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        return from;\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        address previousOwner = _update(to, tokenId, address(0));\n        if (previousOwner != address(0)) {\n            revert ERC721InvalidSender(address(0));\n        }\n    }\n\n    /**\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\n        _mint(to, tokenId);\n        _checkOnERC721Received(address(0), to, tokenId, data);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal {\n        address previousOwner = _update(address(0), tokenId, address(0));\n        if (previousOwner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        address previousOwner = _update(to, tokenId, address(0));\n        if (previousOwner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        } else if (previousOwner != from) {\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\n        }\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `tokenId` token must exist and be owned by `from`.\n     * - `to` cannot be the zero address.\n     * - `from` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\n        _safeTransfer(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\n        _transfer(from, to, tokenId);\n        _checkOnERC721Received(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\n     *\n     * Emits an {Approval} event.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address to, uint256 tokenId, address auth) internal {\n        _approve(to, tokenId, auth, true);\n    }\n\n    /**\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\n     * emitted in the context of transfers.\n     */\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\n        // Avoid reading the owner unless necessary\n        if (emitEvent || auth != address(0)) {\n            address owner = _requireOwned(tokenId);\n\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\n                revert ERC721InvalidApprover(auth);\n            }\n\n            if (emitEvent) {\n                emit Approval(owner, to, tokenId);\n            }\n        }\n\n        _tokenApprovals[tokenId] = to;\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Requirements:\n     * - operator can't be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        if (operator == address(0)) {\n            revert ERC721InvalidOperator(operator);\n        }\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\n     * Returns the owner.\n     *\n     * Overrides to ownership logic should be done to {_ownerOf}.\n     */\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\n        address owner = _ownerOf(tokenId);\n        if (owner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n        return owner;\n    }\n\n    /**\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     */\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\n        if (to.code.length > 0) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                if (retval != IERC721Receiver.onERC721Received.selector) {\n                    revert ERC721InvalidReceiver(to);\n                }\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert ERC721InvalidReceiver(to);\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/ERC721URIStorage.sol)\n\npragma solidity ^0.8.20;\n\nimport {ERC721} from \"../ERC721.sol\";\nimport {Strings} from \"../../../utils/Strings.sol\";\nimport {IERC4906} from \"../../../interfaces/IERC4906.sol\";\nimport {IERC165} from \"../../../interfaces/IERC165.sol\";\n\n/**\n * @dev ERC721 token with storage based token URI management.\n */\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\n    using Strings for uint256;\n\n    // Interface ID as defined in ERC-4906. This does not correspond to a traditional interface ID as ERC-4906 only\n    // defines events and does not include any external function.\n    bytes4 private constant ERC4906_INTERFACE_ID = bytes4(0x49064906);\n\n    // Optional mapping for token URIs\n    mapping(uint256 tokenId => string) private _tokenURIs;\n\n    /**\n     * @dev See {IERC165-supportsInterface}\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\n        return interfaceId == ERC4906_INTERFACE_ID || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireOwned(tokenId);\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = _baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via string.concat).\n        if (bytes(_tokenURI).length > 0) {\n            return string.concat(base, _tokenURI);\n        }\n\n        return super.tokenURI(tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Emits {MetadataUpdate}.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        _tokenURIs[tokenId] = _tokenURI;\n        emit MetadataUpdate(tokenId);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721} from \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n     *   {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\n     * reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS\n    }\n\n    /**\n     * @dev The signature derives the `address(0)`.\n     */\n    error ECDSAInvalidSignature();\n\n    /**\n     * @dev The signature has an invalid length.\n     */\n    error ECDSAInvalidSignatureLength(uint256 length);\n\n    /**\n     * @dev The signature has an S value that is in the upper half order.\n     */\n    error ECDSAInvalidSignatureS(bytes32 s);\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\n     * and a bytes32 providing additional information about the error.\n     *\n     * If no error is returned, then the address can be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\n        unchecked {\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\n            return tryRecover(hash, v, r, s);\n        }\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError, bytes32) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS, s);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\n        }\n\n        return (signer, RecoverError.NoError, bytes32(0));\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\n     */\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert ECDSAInvalidSignature();\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert ECDSAInvalidSignatureS(errorArg);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/EIP712.sol)\n\npragma solidity ^0.8.20;\n\nimport {MessageHashUtils} from \"./MessageHashUtils.sol\";\nimport {ShortStrings, ShortString} from \"../ShortStrings.sol\";\nimport {IERC5267} from \"../../interfaces/IERC5267.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\n *\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable\n */\nabstract contract EIP712 is IERC5267 {\n    using ShortStrings for *;\n\n    bytes32 private constant TYPE_HASH =\n        keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _cachedDomainSeparator;\n    uint256 private immutable _cachedChainId;\n    address private immutable _cachedThis;\n\n    bytes32 private immutable _hashedName;\n    bytes32 private immutable _hashedVersion;\n\n    ShortString private immutable _name;\n    ShortString private immutable _version;\n    string private _nameFallback;\n    string private _versionFallback;\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        _name = name.toShortStringWithFallback(_nameFallback);\n        _version = version.toShortStringWithFallback(_versionFallback);\n        _hashedName = keccak256(bytes(name));\n        _hashedVersion = keccak256(bytes(version));\n\n        _cachedChainId = block.chainid;\n        _cachedDomainSeparator = _buildDomainSeparator();\n        _cachedThis = address(this);\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\n            return _cachedDomainSeparator;\n        } else {\n            return _buildDomainSeparator();\n        }\n    }\n\n    function _buildDomainSeparator() private view returns (bytes32) {\n        return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n\n    /**\n     * @dev See {IERC-5267}.\n     */\n    function eip712Domain()\n        public\n        view\n        virtual\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        )\n    {\n        return (\n            hex\"0f\", // 01111\n            _EIP712Name(),\n            _EIP712Version(),\n            block.chainid,\n            address(this),\n            bytes32(0),\n            new uint256[](0)\n        );\n    }\n\n    /**\n     * @dev The name parameter for the EIP712 domain.\n     *\n     * NOTE: By default this function reads _name which is an immutable value.\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function _EIP712Name() internal view returns (string memory) {\n        return _name.toStringWithFallback(_nameFallback);\n    }\n\n    /**\n     * @dev The version parameter for the EIP712 domain.\n     *\n     * NOTE: By default this function reads _version which is an immutable value.\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function _EIP712Version() internal view returns (string memory) {\n        return _version.toStringWithFallback(_versionFallback);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\n\npragma solidity ^0.8.20;\n\nimport {Strings} from \"../Strings.sol\";\n\n/**\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\n *\n * The library provides methods for generating a hash of a message that conforms to the\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\n * specifications.\n */\nlibrary MessageHashUtils {\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x45` (`personal_sign` messages).\n     *\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\n     * `\"\\x19Ethereum Signed Message:\\n32\"` and hashing the result. It corresponds with the\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n     *\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\n     * keccak256, although any bytes32 value can be safely used because the final digest will\n     * be re-hashed.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\") // 32 is the bytes-length of messageHash\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\n        }\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x45` (`personal_sign` messages).\n     *\n     * The digest is calculated by prefixing an arbitrary `message` with\n     * `\"\\x19Ethereum Signed Message:\\n\" + len(message)` and hashing the result. It corresponds with the\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\n        return\n            keccak256(bytes.concat(\"\\x19Ethereum Signed Message:\\n\", bytes(Strings.toString(message.length)), message));\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x00` (data with intended validator).\n     *\n     * The digest is calculated by prefixing an arbitrary `data` with `\"\\x19\\x00\"` and the intended\n     * `validator` address. Then hashing the result.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(hex\"19_00\", validator, data));\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\n     *\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\n     * `\\x19\\x01` and hashing the result. It corresponds to the hash signed by the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, hex\"19_01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            digest := keccak256(ptr, 0x42)\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ShortStrings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ShortStrings.sol)\n\npragma solidity ^0.8.20;\n\nimport {StorageSlot} from \"./StorageSlot.sol\";\n\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\n// | length  | 0x                                                              BB |\ntype ShortString is bytes32;\n\n/**\n * @dev This library provides functions to convert short memory strings\n * into a `ShortString` type that can be used as an immutable variable.\n *\n * Strings of arbitrary length can be optimized using this library if\n * they are short enough (up to 31 bytes) by packing them with their\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\n * fallback mechanism can be used for every other case.\n *\n * Usage example:\n *\n * ```solidity\n * contract Named {\n *     using ShortStrings for *;\n *\n *     ShortString private immutable _name;\n *     string private _nameFallback;\n *\n *     constructor(string memory contractName) {\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\n *     }\n *\n *     function name() external view returns (string memory) {\n *         return _name.toStringWithFallback(_nameFallback);\n *     }\n * }\n * ```\n */\nlibrary ShortStrings {\n    // Used as an identifier for strings longer than 31 bytes.\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\n\n    error StringTooLong(string str);\n    error InvalidShortString();\n\n    /**\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\n     *\n     * This will trigger a `StringTooLong` error is the input string is too long.\n     */\n    function toShortString(string memory str) internal pure returns (ShortString) {\n        bytes memory bstr = bytes(str);\n        if (bstr.length > 31) {\n            revert StringTooLong(str);\n        }\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\n    }\n\n    /**\n     * @dev Decode a `ShortString` back to a \"normal\" string.\n     */\n    function toString(ShortString sstr) internal pure returns (string memory) {\n        uint256 len = byteLength(sstr);\n        // using `new string(len)` would work locally but is not memory safe.\n        string memory str = new string(32);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(str, len)\n            mstore(add(str, 0x20), sstr)\n        }\n        return str;\n    }\n\n    /**\n     * @dev Return the length of a `ShortString`.\n     */\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\n        if (result > 31) {\n            revert InvalidShortString();\n        }\n        return result;\n    }\n\n    /**\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\n     */\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\n        if (bytes(value).length < 32) {\n            return toShortString(value);\n        } else {\n            StorageSlot.getStringSlot(store).value = value;\n            return ShortString.wrap(FALLBACK_SENTINEL);\n        }\n    }\n\n    /**\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\n     */\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\n            return toString(value);\n        } else {\n            return store;\n        }\n    }\n\n    /**\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\n     * {setWithFallback}.\n     *\n     * WARNING: This will return the \"byte length\" of the string. This may not reflect the actual length in terms of\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\n     */\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\n            return byteLength(value);\n        } else {\n            return bytes(store).length;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(newImplementation.code.length > 0);\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"./math/Math.sol\";\nimport {SignedMath} from \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\n    uint8 private constant ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev The `value` string doesn't fit in the specified `length`.\n     */\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toStringSigned(int256 value) internal pure returns (string memory) {\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        uint256 localValue = value;\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\n            localValue >>= 4;\n        }\n        if (localValue != 0) {\n            revert StringsInsufficientHexLength(value, length);\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n     * representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "contracts/CampaignManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport { Console } from \"@fhenixprotocol/contracts/utils/debug/Console.sol\";\nimport \"@fhenixprotocol/contracts/FHE.sol\";\nimport \"./FHERC721/FhunderNFT.sol\";\nimport { IFHERC20 } from \"./FHERC20/IFHERC20.sol\";\n\ninterface IFhunderNFT {\n    function mintNFT(address recipient, euint128 encryptedAmount, uint256 campaignId, string memory tokenURICID) external returns (uint256);\n    function balanceOf(address owner) external view returns (uint256);\n}\n\ncontract CampaignManager {\n    // Campaign structure\n    struct Campaign {\n        address creator;\n        uint256 campaignId;\n        string name;\n        string description;\n        uint128 minimumContribution;\n        uint256 deadline;\n        euint128 goal;\n        euint128 totalContributions;\n        euint32 numContributors;\n        euint32 contributonsCount;\n        // bool goalAchieved; // True if the goal is achieved before the deadline and funds can be released to the creator\n        mapping(address => euint128) contributions;\n        uint256 withdrawnDate;\n    }\n\n    // Mapping of campaign ID to campaign\n    mapping(uint256 => Campaign) public campaigns;\n\n    // Campaign counter to assign unique IDs\n    uint256 public campaignCounter;\n\n    address nftAddress;\n    address tokenContractAddress;\n\n    // Events\n    event CampaignCreated(\n        uint256 indexed campaignId,\n        address indexed creator,\n        string name,\n        string description,\n        euint128 goal,\n        uint128 minimumContribution,\n        uint256 deadline\n    );\n    \n    event ContributionMade(\n        uint256 indexed campaignId,\n        address indexed contributor,\n        euint128 amount,\n        uint256 tokenId\n    );\n\n    event Withdrawal(\n        uint256 indexed campaignId,\n        address indexed contributor,\n        euint128 amount\n    );\n\n    error CampaignDoesNotExist();\n    error OnlyCampaignCreator();\n    error InvalidContribution();\n    error FundingGoalNotMet();\n\n    // Constructor to set the NFT contract address\n    constructor(address _fhunderNFTAddress, address _tokenContractAddress) {\n        Console.log(\"[Init] Setting NFT contract to \", _fhunderNFTAddress);\n        nftAddress = _fhunderNFTAddress;\n        tokenContractAddress = _tokenContractAddress;\n    }\n\n    // Modifier to check if a campaign exists\n    modifier campaignExists(uint256 campaignId) {\n        if (campaigns[campaignId].creator == address(0)) revert CampaignDoesNotExist();\n        // require(campaigns[campaignId].creator != address(0), \"Campaign does not exist\");\n        _;\n    }\n\n    // Modifier to check if the caller is the campaign creator\n    modifier onlyCampaignCreator(uint256 campaignId) {\n        if (campaigns[campaignId].creator != msg.sender) revert OnlyCampaignCreator();\n        // require(campaigns[campaignId].creator == msg.sender, \"Only the campaign creator can call this function\");\n        _;\n    }\n\n    // Create a new campaign\n    function createCampaign(\n        string memory name,\n        string memory description,\n        inEuint128 calldata goal,\n        uint128 minimumContribution,\n        uint256 duration\n    ) public {\n        campaignCounter++;\n        uint256 newCampaignId = campaignCounter;\n        \n        Campaign storage newCampaign = campaigns[newCampaignId];\n        newCampaign.creator = msg.sender;\n        newCampaign.campaignId = newCampaignId;\n        newCampaign.name = name;\n        newCampaign.description = description;\n        newCampaign.goal = FHE.asEuint128(goal);\n        newCampaign.minimumContribution = minimumContribution;\n        newCampaign.deadline = block.timestamp + duration;\n        newCampaign.totalContributions = FHE.asEuint128(0);\n        newCampaign.numContributors = FHE.asEuint32(0);\n        newCampaign.contributonsCount = FHE.asEuint32(0);\n\n        Console.log(\"Campaign created with ID:\", newCampaignId);\n        emit CampaignCreated(newCampaignId, msg.sender, name, description, newCampaign.goal, minimumContribution, newCampaign.deadline);\n    }\n\n    // Make a contribution to a campaign\n    function contribute(uint256 campaignId, inEuint128 calldata amount) public campaignExists(campaignId) {\n        Campaign storage campaign = campaigns[campaignId];\n        Console.log(\"Contributing to campaign\", campaignId);\n        Console.log(\"Campaign deadline: \", campaign.deadline);\n        Console.log(\"Current block timestamp: \", block.timestamp);\n        Console.log(\"Encrypted amount: \", uint128(FHE.decrypt(FHE.asEuint128(amount))));\n        Console.log(\"Minimum contribution: \", campaign.minimumContribution);\n\n        // Validations & Transfers\n        // require(campaign.deadline > block.timestamp, \"Campaign ended already\");\n        euint128 encryptedAmount = FHE.asEuint128(amount);\n        \n        ebool isValid = FHE.gte(FHE.asEuint128(uint128(FHE.decrypt(encryptedAmount))), FHE.asEuint128(campaign.minimumContribution));\n        Console.log(\"Is valid: \", FHE.decrypt(isValid));\n        // FHE.req(isValid);    \n        Console.log(\"Transferring...\");\n        euint128 transferred = IFHERC20(tokenContractAddress)._transferFromEncrypted(msg.sender, address(this), FHE.asEuint128(amount));\n        Console.log(\"Transferred: \", uint128(FHE.decrypt(transferred)));\n        require(FHE.decrypt(transferred) > 0, \"Transfer failed\");\n        Console.log(\"Transferred successfully\");\n\n        // // Update the campaign's state\n        ebool isNewContributor = FHE.eq(campaign.contributions[msg.sender], FHE.asEuint128(0));\n        campaign.totalContributions = FHE.add(campaign.totalContributions, encryptedAmount);\n        campaign.contributonsCount = FHE.add(campaign.contributonsCount, FHE.asEuint32(1));\n        campaign.numContributors = FHE.add(campaign.numContributors, FHE.select(isNewContributor, FHE.asEuint32(1), FHE.asEuint32(0)));\n        campaign.contributions[msg.sender] = FHE.add(campaign.contributions[msg.sender], FHE.asEuint128(amount));\n\n        // // Mint NFT \n        // string memory tokenURICID = \"QmdLi5N4SZGsKoRbKta2P1EAcp6KzWcgPnB4UCHwho1UZ8\";\n        // uint256 nftTokenId = FhunderNFT(nftAddress).mintNFT(msg.sender, encryptedAmount, campaignId, tokenURICID);\n\n        // emit ContributionMade(campaignId, msg.sender, encryptedAmount, nftTokenId);\n        emit ContributionMade(campaignId, msg.sender, FHE.asEuint128(amount), 0);\n    }\n\n    function withdraw(uint256 campaignId) public onlyCampaignCreator(campaignId) {\n        Campaign storage campaign = campaigns[campaignId];\n\n        // Validations\n        FHE.req(FHE.gte(campaign.totalContributions, campaign.goal));\n        require(block.timestamp >= campaign.deadline, \"Campaign is not yet ended\");\n\n        // Transfer tokens to the creator\n        IFHERC20(tokenContractAddress)._transferEncrypted(msg.sender, campaign.totalContributions);\n\n        // Reset the campaign's state\n        campaign.withdrawnDate = block.timestamp;\n\n        // Events\n        emit Withdrawal(campaignId, msg.sender, campaign.totalContributions);\n    }\n\n    function releaseFunds(uint256 campaignId) public campaignExists(campaignId) {\n        Campaign storage campaign = campaigns[campaignId];\n\n        // Check if the funding goal is not met\n        // FHE.req(FHE.lte(campaign.totalContributions, campaign.goal), \"Funding goal met, cannot release funds\");\n\n        // Get the contributor's contribution\n        euint128 contributorAmount = campaign.contributions[msg.sender];\n        // FHE.req(FHE.lte(contributorAmount, FHE.asEuint128(0)), \"Nothing to release..\");\n\n        // Reset the contributor's contribution\n        campaign.contributions[msg.sender] = FHE.asEuint128(0);\n\n        // Transfer tokens back to the contributor\n        // IFHERC20(tokenContractAddress)._transferEncrypted(address(this), msg.sender, FHE.asEuint128(campaign.contributions[msg.sender]));\n\n        emit Withdrawal(campaignId, msg.sender, campaign.contributions[msg.sender]);\n    }\n\n    // Get campaign details\n    function getCampaign(uint256 campaignId) \n      public \n      view \n      campaignExists(campaignId)\n      returns (\n        address creator,\n        string memory name,\n        string memory description,\n        uint128 goal,\n        uint128 minimumContribution,\n        uint256 deadline,\n        uint128 totalContributions,\n        uint32 numContributors,\n        uint32 contributonsCount,\n        uint256 withdrawnDate\n    ) {\n        Campaign storage campaign = campaigns[campaignId];\n\n        return (\n            campaign.creator,\n            campaign.name,\n            campaign.description,\n            FHE.decrypt(campaign.goal),\n            campaign.minimumContribution,\n            campaign.deadline,\n            FHE.decrypt(campaign.totalContributions),\n            FHE.decrypt(campaign.numContributors),\n            FHE.decrypt(campaign.contributonsCount),\n            campaign.withdrawnDate\n        );\n    }\n\n    // Decrypt and get the total contributions (only for campaign creator)\n    function decryptTotalContributions(uint256 campaignId) \n      public \n      view \n      campaignExists(campaignId)\n      onlyCampaignCreator(campaignId)\n      returns (uint128) {\n        return FHE.decrypt(campaigns[campaignId].totalContributions);\n    }\n\n    // Update campaign description\n    function updateCampaignDescription(uint256 campaignId, string memory newDescription) \n      public\n      campaignExists(campaignId)\n      onlyCampaignCreator(campaignId) {\n        Campaign storage campaign = campaigns[campaignId];\n        campaign.description = newDescription;\n    }\n\n    function getTime() public view returns (uint256) {\n        return block.timestamp;\n    }\n}"
    },
    "contracts/FHERC20/FhunderToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.19 <0.9.0;\n\nimport { Console } from \"@fhenixprotocol/contracts/utils/debug/Console.sol\";\nimport { ERC20 } from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\n\nimport { FHE, euint128, inEuint128 } from \"@fhenixprotocol/contracts/FHE.sol\";\nimport { IFHERC20 } from \"./IFHERC20.sol\";\n\nimport \"@fhenixprotocol/contracts/access/Permissioned.sol\";\n\nerror ErrorInsufficientFunds();\nerror ERC20InvalidApprover(address);\nerror ERC20InvalidSpender(address);\n\ncontract FhunderToken is IFHERC20, ERC20, Permissioned, Ownable, AccessControl {\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    bytes32 public constant BURNER_ROLE = keccak256(\"BURNER_ROLE\");\n\n    // A mapping from address to an encrypted balance.\n    mapping(address => euint128) internal _encBalances;\n\n    // A mapping from address (owner) to a mapping of address (spender) to an encrypted amount.\n    mapping(address => mapping(address => euint128)) internal _allowed;\n    \n    euint128 internal totalEncryptedSupply = FHE.asEuint128(0);\n\n    uint8 private _customDecimals;\n\n    event FhunderTransfer(address indexed from, address indexed to, uint256 amount);\n    event FhunderMint(address indexed to, uint256 amount);\n    event FhunderEMint(address indexed to, euint128 amount);\n\n    constructor(string memory name, string memory symbol, uint8 decimals_, address owner_) ERC20(name, symbol) Ownable(owner_) {\n        _customDecimals = decimals_;\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _grantRole(MINTER_ROLE, msg.sender);\n        _grantRole(BURNER_ROLE, msg.sender);\n    }\n\n    function decimals() public view virtual override returns (uint8) {\n        return _customDecimals;\n    }\n\n    function _allowanceEncrypted(address owner, address spender) internal view returns (euint128) {\n        return _allowed[owner][spender];\n    }\n\n    function allowanceEncrypted(\n        address owner,\n        address spender,\n        Permission calldata permission\n    ) public view virtual onlyPermitted(permission, owner) returns (string memory) {\n        return FHE.sealoutput(_allowanceEncrypted(owner, spender), permission.publicKey);\n    }\n\n    function approveEncrypted(address spender, inEuint128 calldata value) public virtual returns (bool) {\n        _approve(msg.sender, spender, FHE.asEuint128(value));\n        return true;\n    }\n\n    function _approve(address owner, address spender, euint128 value) internal {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowed[owner][spender] = value;\n        Console.log(\"[_approve] Owner: \", owner);\n        Console.log(\"[_approve] Spender: \", spender);\n        Console.log(\"[_approve] Value: \", uint128(FHE.decrypt(_allowed[owner][spender])));\n    }\n\n    function _spendAllowance(address owner, address spender, euint128 value) internal virtual returns (euint128) {\n        Console.log(\"[_spendAllowance] Owner: \", owner);\n        Console.log(\"[_spendAllowance] Spender: \", spender);\n        Console.log(\"[_spendAllowance] Value: \", uint128(FHE.decrypt(value)));\n        euint128 currentAllowance = _allowanceEncrypted(owner, spender);\n        Console.log(\"[_spendAllowance] Current allowance: \", uint128(FHE.decrypt(currentAllowance)));\n        euint128 spent = FHE.min(currentAllowance, value);\n        Console.log(\"[_spendAllowance] Spent: \", uint128(FHE.decrypt(spent)));\n        _approve(owner, spender, FHE.sub(currentAllowance, spent));\n\n        return spent;\n    }\n\n    function transferFromEncrypted(address from, address to, inEuint128 calldata value) public virtual returns (euint128) {\n        return _transferFromEncrypted(from, to, FHE.asEuint128(value));\n    }\n\n    function _transferFromEncrypted(address from, address to, euint128 value) public virtual returns (euint128) {\n        Console.log(\"[_transferFromEncrypted] Transferring from: \", from);\n        Console.log(\"[_transferFromEncrypted] To: \", to);\n        Console.log(\"[_transferFromEncrypted] Value: \", uint128(FHE.decrypt(value)));\n        euint128 spent = _spendAllowance(from, msg.sender, value);\n        Console.log(\"[_transferFromEncrypted] Spent: \", uint128(FHE.decrypt(spent)));\n        return _transferImpl(from, to, spent);\n    }\n\n    function wrap(uint128 amount) public {\n        if (balanceOf(msg.sender) < amount) {\n            revert ErrorInsufficientFunds();\n        }\n\n        _burn(msg.sender, amount);\n        euint128 eAmount = FHE.asEuint128(amount);\n        _encBalances[msg.sender] = FHE.add(_encBalances[msg.sender], eAmount);\n        totalEncryptedSupply = FHE.add(totalEncryptedSupply, eAmount);\n    }\n\n    function unwrap(uint128 amount) public {\n        euint128 encAmount = FHE.asEuint128(amount);\n\n        euint128 amountToUnwrap = FHE.select(FHE.gte(_encBalances[msg.sender], encAmount), encAmount, FHE.asEuint128(0));\n\n        _encBalances[msg.sender] = FHE.sub(_encBalances[msg.sender], amountToUnwrap);\n        totalEncryptedSupply = FHE.sub(totalEncryptedSupply, amountToUnwrap);\n\n        _mint(msg.sender, FHE.decrypt(amountToUnwrap));\n    }\n\n    function mint(uint256 amount) public onlyRole(MINTER_ROLE) {\n        emit FhunderMint(msg.sender, amount);\n        _mint(msg.sender, amount);\n    }\n\n    function mintEncrypted(address to, inEuint128 calldata encryptedAmount) public onlyRole(MINTER_ROLE) {\n        emit FhunderEMint(msg.sender, FHE.asEuint128(encryptedAmount));\n        _mintEncrypted(to, FHE.asEuint128(encryptedAmount));\n    }\n\n    function _mintEncrypted(address to, euint128 amount) internal {\n        _encBalances[to] = FHE.add(_encBalances[to], amount);\n        totalEncryptedSupply = FHE.add(totalEncryptedSupply, amount);\n    }\n\n    function burnFromEncrypted(address account, inEuint128 calldata encryptedAmount) public onlyRole(BURNER_ROLE) {\n        _burnFromEncrypted(account, FHE.asEuint128(encryptedAmount));\n    }\n\n    function _burnFromEncrypted(address account, euint128 amount) internal {\n        euint128 amountToBurn = FHE.select(_encBalances[account].gte(amount), amount, FHE.asEuint128(0));\n\n        _encBalances[account] = FHE.sub(_encBalances[account], amountToBurn);\n        totalEncryptedSupply = FHE.sub(totalEncryptedSupply, amountToBurn);\n    }\n\n    function transferEncrypted(address to, inEuint128 calldata encryptedAmount) public returns (euint128) {\n        return _transferEncrypted(to, FHE.asEuint128(encryptedAmount));\n    }\n\n    // Transfers an amount from the message sender address to the `to` address.\n    function _transferEncrypted(address to, euint128 amount) public returns (euint128) {\n        emit FhunderTransfer(msg.sender, to, FHE.decrypt(amount));\n        return _transferImpl(msg.sender, to, amount);\n    }\n\n    // Transfers an encrypted amount.\n    function _transferImpl(address from, address to, euint128 amount) internal returns (euint128) {\n        Console.log(\"[_transferImpl] Transferring from: \", from);\n        Console.log(\"[_transferImpl] To: \", to);\n        Console.log(\"[_transferImpl] Value: \", uint128(FHE.decrypt(amount)));\n        Console.log(\"[_transferImpl] Encrypted balance of from: \", uint128(FHE.decrypt(_encBalances[from])));\n        // Make sure the sender has enough tokens.\n        euint128 validAmount = FHE.asEuint128(uint128(FHE.decrypt(amount)));\n        Console.log(\"[_transferImpl] Is lte : \", FHE.decrypt(FHE.lte(validAmount, _encBalances[from])));\n\n        euint128 amountToSend = FHE.select(FHE.lte(validAmount, _encBalances[from]), validAmount, FHE.asEuint128(0));\n        Console.log(\"[_transferImpl] Amount to send: \", uint128(FHE.decrypt(amountToSend)));\n\n        _encBalances[to] = FHE.add(_encBalances[to], amountToSend);\n        _encBalances[from] = FHE.sub(_encBalances[from], amountToSend);\n\n        return amountToSend;\n    }\n\n    function balanceOfEncrypted(address account, Permission memory auth) public view virtual onlyPermitted(auth, account) returns (string memory) {\n        return _encBalances[account].seal(auth.publicKey);\n    }\n\n    function balanceOfEncrypted() external view virtual returns (euint128) {\n        return _encBalances[msg.sender];\n    }\n\n    function decryptedBalanceOf() public view virtual returns (uint256) {\n        return FHE.decrypt(_encBalances[msg.sender]);\n    }\n\n    function decryptedBalanceOf(address account) public view virtual returns (uint256) {\n        return FHE.decrypt(_encBalances[account]);\n    }\n}"
    },
    "contracts/FHERC20/IFHERC20.sol": {
      "content": "pragma solidity >=0.8.19 <0.9.0;\n\n// SPDX-License-Identifier: MIT\n// Fhenix Protocol (last updated v0.1.0) (token/FHERC20/IFHERC20.sol)\n// Inspired by OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts) (token/ERC20/IERC20.sol)\n\nimport { Permission, Permissioned } from \"@fhenixprotocol/contracts/access/Permissioned.sol\";\nimport { euint128, inEuint128 } from \"@fhenixprotocol/contracts/FHE.sol\";\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IFHERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event TransferEncrypted(address indexed from, address indexed to);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approveEncrypted}. `value` is the new allowance.\n     */\n    event ApprovalEncrypted(address indexed owner, address indexed spender);\n\n    // /**\n    //  * @dev Returns the value of tokens in existence.\n    //  */\n    // function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`, sealed and encrypted for the caller.\n     */\n    function balanceOfEncrypted(address account, Permission memory auth) external view returns (string memory);\n\n    function balanceOfEncrypted() external view returns (euint128);\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     * Accepts the value as inEuint128, more convenient for calls from EOAs.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     */\n    function transferEncrypted(address to, inEuint128 calldata value) external returns (euint128);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     * Accepts the value as euint128, more convenient for calls from other contracts\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     */\n    function _transferEncrypted(address to, euint128 value) external returns (euint128);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowanceEncrypted(address owner, address spender, Permission memory permission) external view returns (string memory);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {ApprovalEncrypted} event.\n     */\n    function approveEncrypted(address spender, inEuint128 calldata value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance. Accepts the value as inEuint128, more convenient for calls from EOAs.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {TransferEncrypted} event.\n     */\n    function transferFromEncrypted(address from, address to, inEuint128 calldata value) external returns (euint128);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance. Accepts the value as inEuint128, more convenient for calls\n     * from other contracts.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {TransferEncrypted} event.\n     */\n    function _transferFromEncrypted(address from, address to, euint128 value) external returns (euint128);\n\n    function decryptedBalanceOf() external view virtual returns (uint256);\n\n    function decryptedBalanceOf(address account) external view virtual returns (uint256);\n}"
    },
    "contracts/FHERC721/FhunderNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { Console } from \"@fhenixprotocol/contracts/utils/debug/Console.sol\";\nimport \"@fhenixprotocol/contracts/FHE.sol\";\n\ncontract FhunderNFT is ERC721, ERC721URIStorage, Ownable {\n    uint256 public _tokenIdCounter;\n\n    struct NFTData {\n        euint128 encryptedAmount;\n        uint256 campaignId;\n    }\n\n    mapping(uint256 => NFTData) public nftData;\n\n    event NFTMinted(uint256 indexed tokenId, address indexed recipient, uint256 indexed campaignId, euint128 encryptedAmount);\n\n    constructor()\n        ERC721(\"FhunderNFT\", \"FNFT\")\n        Ownable(msg.sender)\n    {\n        Console.log(\"FhunderNFT contract deployed. owner is : \", owner());\n        _tokenIdCounter = 0;\n    }\n\n    function mintNFT(address recipient, euint128 encryptedAmount, uint256 campaignId, string memory tokenURICID) external returns (uint256) {\n        Console.log(\"Minting NFT for recipient: \", recipient);\n        _tokenIdCounter = _tokenIdCounter + 1;\n        uint256 newTokenId = _tokenIdCounter;\n\n        _safeMint(recipient, newTokenId);\n        _setTokenURI(newTokenId, tokenURICID);\n\n        nftData[newTokenId] = NFTData(encryptedAmount, campaignId);\n        Console.log(\"NFT minted successfully with tokenId: \", newTokenId);\n\n        emit NFTMinted(newTokenId, recipient, campaignId, encryptedAmount);\n        \n        return newTokenId;\n    }\n\n    function getEncryptedAmount(uint256 tokenId) external view returns (euint128) {\n        require(ownerOf(tokenId) == msg.sender, \"You do not own this token\");\n        return nftData[tokenId].encryptedAmount;\n    }\n\n    function tokenURI(uint256 tokenId)\n        public\n        view\n        override(ERC721, ERC721URIStorage)\n        returns (string memory)\n    {\n        string memory uri = super.tokenURI(tokenId);\n        Console.log(\"tokenURI: \", uri);\n        return uri;\n    }\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        override(ERC721, ERC721URIStorage)\n        returns (bool)\n    {\n        bool isSupported = super.supportsInterface(interfaceId);\n        Console.log(\"Checking isSupported: \", isSupported);\n        return isSupported;\n    }\n\n    function balanceOf(address owner) public view override(ERC721, IERC721) returns (uint256) {\n        uint256 balance = super.balanceOf(owner);\n        Console.log(\"NFT balance is : \", balance);\n        return balance;\n    }\n\n    function ownerOf(uint256 tokenId) public view override(ERC721, IERC721) returns (address) {\n        address owner = super.ownerOf(tokenId);\n        Console.log(\"NFT owner is : \", owner);\n        return owner;\n    }\n\n    function getCounter() external view returns (uint256) {\n        Console.log(\"Counter is : \", _tokenIdCounter);\n        return _tokenIdCounter;\n    }\n}\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}