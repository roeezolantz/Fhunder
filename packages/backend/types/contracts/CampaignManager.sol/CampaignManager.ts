/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type InEuint128Struct = { data: BytesLike };

export type InEuint128StructOutput = [data: string] & { data: string };

export interface CampaignManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "campaignCounter"
      | "campaigns"
      | "contribute"
      | "createCampaign"
      | "decryptTotalContributions"
      | "getCampaign"
      | "getTime"
      | "releaseFunds"
      | "updateCampaignDescription"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CampaignCreated"
      | "ContributionMade"
      | "Withdrawal"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "campaignCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "campaigns",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contribute",
    values: [BigNumberish, InEuint128Struct]
  ): string;
  encodeFunctionData(
    functionFragment: "createCampaign",
    values: [string, string, InEuint128Struct, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decryptTotalContributions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCampaign",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "releaseFunds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCampaignDescription",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "campaignCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "campaigns", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "contribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decryptTotalContributions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "releaseFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCampaignDescription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace CampaignCreatedEvent {
  export type InputTuple = [
    campaignId: BigNumberish,
    creator: AddressLike,
    name: string,
    description: string,
    goal: BigNumberish,
    minimumContribution: BigNumberish,
    deadline: BigNumberish
  ];
  export type OutputTuple = [
    campaignId: bigint,
    creator: string,
    name: string,
    description: string,
    goal: bigint,
    minimumContribution: bigint,
    deadline: bigint
  ];
  export interface OutputObject {
    campaignId: bigint;
    creator: string;
    name: string;
    description: string;
    goal: bigint;
    minimumContribution: bigint;
    deadline: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContributionMadeEvent {
  export type InputTuple = [
    campaignId: BigNumberish,
    contributor: AddressLike,
    amount: BigNumberish,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [
    campaignId: bigint,
    contributor: string,
    amount: bigint,
    tokenId: bigint
  ];
  export interface OutputObject {
    campaignId: bigint;
    contributor: string;
    amount: bigint;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalEvent {
  export type InputTuple = [
    campaignId: BigNumberish,
    contributor: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    campaignId: bigint,
    contributor: string,
    amount: bigint
  ];
  export interface OutputObject {
    campaignId: bigint;
    contributor: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CampaignManager extends BaseContract {
  connect(runner?: ContractRunner | null): CampaignManager;
  waitForDeployment(): Promise<this>;

  interface: CampaignManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  campaignCounter: TypedContractMethod<[], [bigint], "view">;

  campaigns: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        creator: string;
        campaignId: bigint;
        name: string;
        description: string;
        minimumContribution: bigint;
        deadline: bigint;
        goal: bigint;
        totalContributions: bigint;
        numContributors: bigint;
        contributonsCount: bigint;
        withdrawnDate: bigint;
      }
    ],
    "view"
  >;

  contribute: TypedContractMethod<
    [campaignId: BigNumberish, amount: InEuint128Struct],
    [void],
    "nonpayable"
  >;

  createCampaign: TypedContractMethod<
    [
      name: string,
      description: string,
      goal: InEuint128Struct,
      minimumContribution: BigNumberish,
      duration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  decryptTotalContributions: TypedContractMethod<
    [campaignId: BigNumberish],
    [bigint],
    "view"
  >;

  getCampaign: TypedContractMethod<
    [campaignId: BigNumberish],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        creator: string;
        name: string;
        description: string;
        goal: bigint;
        minimumContribution: bigint;
        deadline: bigint;
        totalContributions: bigint;
        numContributors: bigint;
        contributonsCount: bigint;
        withdrawnDate: bigint;
      }
    ],
    "view"
  >;

  getTime: TypedContractMethod<[], [bigint], "view">;

  releaseFunds: TypedContractMethod<
    [campaignId: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateCampaignDescription: TypedContractMethod<
    [campaignId: BigNumberish, newDescription: string],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<
    [campaignId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "campaignCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "campaigns"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        creator: string;
        campaignId: bigint;
        name: string;
        description: string;
        minimumContribution: bigint;
        deadline: bigint;
        goal: bigint;
        totalContributions: bigint;
        numContributors: bigint;
        contributonsCount: bigint;
        withdrawnDate: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "contribute"
  ): TypedContractMethod<
    [campaignId: BigNumberish, amount: InEuint128Struct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createCampaign"
  ): TypedContractMethod<
    [
      name: string,
      description: string,
      goal: InEuint128Struct,
      minimumContribution: BigNumberish,
      duration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decryptTotalContributions"
  ): TypedContractMethod<[campaignId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCampaign"
  ): TypedContractMethod<
    [campaignId: BigNumberish],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        creator: string;
        name: string;
        description: string;
        goal: bigint;
        minimumContribution: bigint;
        deadline: bigint;
        totalContributions: bigint;
        numContributors: bigint;
        contributonsCount: bigint;
        withdrawnDate: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "releaseFunds"
  ): TypedContractMethod<[campaignId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateCampaignDescription"
  ): TypedContractMethod<
    [campaignId: BigNumberish, newDescription: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[campaignId: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "CampaignCreated"
  ): TypedContractEvent<
    CampaignCreatedEvent.InputTuple,
    CampaignCreatedEvent.OutputTuple,
    CampaignCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ContributionMade"
  ): TypedContractEvent<
    ContributionMadeEvent.InputTuple,
    ContributionMadeEvent.OutputTuple,
    ContributionMadeEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawal"
  ): TypedContractEvent<
    WithdrawalEvent.InputTuple,
    WithdrawalEvent.OutputTuple,
    WithdrawalEvent.OutputObject
  >;

  filters: {
    "CampaignCreated(uint256,address,string,string,uint256,uint128,uint256)": TypedContractEvent<
      CampaignCreatedEvent.InputTuple,
      CampaignCreatedEvent.OutputTuple,
      CampaignCreatedEvent.OutputObject
    >;
    CampaignCreated: TypedContractEvent<
      CampaignCreatedEvent.InputTuple,
      CampaignCreatedEvent.OutputTuple,
      CampaignCreatedEvent.OutputObject
    >;

    "ContributionMade(uint256,address,uint256,uint256)": TypedContractEvent<
      ContributionMadeEvent.InputTuple,
      ContributionMadeEvent.OutputTuple,
      ContributionMadeEvent.OutputObject
    >;
    ContributionMade: TypedContractEvent<
      ContributionMadeEvent.InputTuple,
      ContributionMadeEvent.OutputTuple,
      ContributionMadeEvent.OutputObject
    >;

    "Withdrawal(uint256,address,uint256)": TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;
    Withdrawal: TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;
  };
}
